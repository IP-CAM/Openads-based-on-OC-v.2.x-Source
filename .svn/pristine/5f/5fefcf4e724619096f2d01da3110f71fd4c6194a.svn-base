<?php
class ControllerServiceWebsite extends Controller {
    private $error = array();

    public function index() {
        $this->load->language('service/website');

        $this->document->setTitle($this->language->get('heading_title'));

        $this->document->addStyle(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.css');
        $this->document->addScript(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.js');
        $this->document->addScript(TPL_JS.'form.js');
        $this->document->addStyle(TPL_JS.'formvalidation/dist/css/formValidation.css');
        $this->document->addScript(TPL_JS.'formvalidation/dist/js/formValidation.js');
        $this->document->addScript(TPL_JS.'formvalidation/dist/js/framework/bootstrap.min.js');
        $this->document->addStyle(TPL_JS.'bootstrap/ui/custom-theme/jquery-ui-1.10.3.custom.css');
        $this->document->addScript(TPL_JS.'bootstrap/ui/custom-theme/jquery-ui-1.10.3.custom.js');
        $this->load->model('service/website');

        $this->getList();
    }

    public function add() {
        $this->load->language('service/website');
        $json = array('status'=>0);
        $this->document->setTitle($this->language->get('heading_title'));

        $this->load->model('service/website');

        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/website/add')) {
            $this->model_service_website->addWebsite($this->request->post);

            $this->session->data['success'] = $this->language->get('text_success');
            $json = array('status'=>1,'msg'=> $this->language->get('text_success'));
            
        }
        $this->response->setOutput(json_encode($json));
    }

    public function edit() {
        $this->load->language('service/website');

        $this->document->setTitle($this->language->get('heading_title'));
        $this->load->model('service/website');

        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/website/edit')) {
            
            if($this->model_service_website->editWebsite($this->request->post)){
                $this->session->data['success'] = $this->language->get('text_success');
                $json = array('status'=>1,'msg'=>$this->language->get('text_success'));
            }else{
                $json = array('status'=>-1,'msg'=>$this->language->get('error_permission'));
            }
        }else{
            $json = array('status'=>0,'msg'=>implode(' , ', $this->error));
        }
        $this->response->setOutput(json_encode($json));
    }

    public function delete() {
        $this->load->language('service/website');

        $this->document->setTitle($this->language->get('heading_title'));

        $this->load->model('service/website');

        if (isset($this->request->get['website_id']) && $this->validate('service/website/delete')) {

            $this->model_service_website->deleteWebsite($this->request->get['website_id']);
            $url = '';

            if (isset($this->request->get['filter_domain'])) {
                $url .= '&filter_domain=' . urlencode(html_entity_decode($this->request->get['filter_domain'], ENT_QUOTES, 'UTF-8'));
            }

            if (isset($this->request->get['filter_customer'])) {
                $url .= '&filter_customer=' . urlencode(html_entity_decode($this->request->get['filter_customer'], ENT_QUOTES, 'UTF-8'));
            }

            if (isset($this->request->get['filter_status'])) {
                $url .= '&filter_status=' . $this->request->get['filter_status'];
            }
            if (isset($this->request->get['filter_in_charge'])) {
                $url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
            }
            
            if (isset($this->request->get['filter_date_added'])) {
                $url .= '&filter_date_added=' . $this->request->get['filter_date_added'];
            }

            if (isset($this->request->get['filter_date_modified'])) {
                $url .= '&filter_date_modified=' . $this->request->get['filter_date_modified'];
            }

            if (isset($this->request->get['sort'])) {
                $url .= '&sort=' . $this->request->get['sort'];
            }

            if (isset($this->request->get['order'])) {
                $url .= '&order=' . $this->request->get['order'];
            }

            if (isset($this->request->get['page'])) {
                $url .= '&page=' . $this->request->get['page'];
            }

            $this->response->redirect($this->url->link('service/website', 'token=' . $this->session->data['token'] . $url, 'SSL'));
        }

        $this->getList();
    }

    protected function getList() {
        if (isset($this->request->get['filter_website_sn'])) {
            $filter_website_sn = $this->request->get['filter_website_sn'];
        } else {
            $filter_website_sn = null;
        }

        if (isset($this->request->get['filter_product'])) {
            $filter_product = $this->request->get['filter_product'];
        } else {
            $filter_product = null;
        }
        if (isset($this->request->get['filter_domain'])) {
            $filter_domain = $this->request->get['filter_domain'];
        } else {
            $filter_domain = null;
        }
        if (isset($this->request->get['filter_customer'])) {
            $filter_customer = $this->request->get['filter_customer'];
        } else {
            $filter_customer = null;
        }

        if (isset($this->request->get['filter_status'])) {
            $filter_status = $this->request->get['filter_status'];
        } else {
            $filter_status = null;
        }

        if (isset($this->request->get['filter_in_charge'])) {
            $filter_in_charge = $this->request->get['filter_in_charge'];
        } else {
            $filter_in_charge = null;
        }

        if (isset($this->request->get['filter_modified_start'])) {
            $filter_modified_start = $this->request->get['filter_modified_start'];
        } else {
            $filter_modified_start = null;
        }

        if (isset($this->request->get['filter_modified_end'])) {
            $filter_modified_end = $this->request->get['filter_modified_end'];
        } else {
            $filter_modified_end = null;
        }

        if (isset($this->request->get['filter_message'])) {
            $filter_message = $this->request->get['filter_message'];
        } else {
            $filter_message = null;
        }

        if (isset($this->request->get['sort'])) {
            $sort = $this->request->get['sort'];
        } else {
            $sort = 'w.date_modified';
        }

        if (isset($this->request->get['order'])) {
            $order = $this->request->get['order'];
        } else {
            $order = 'DESC';
        }

        if (isset($this->request->get['page'])) {
            $page = $this->request->get['page'];
        } else {
            $page = 1;
        }

        $url = '';
        if (isset($this->request->get['filter_website_sn'])) {
            $url .= '&filter_website_sn=' . $this->request->get['filter_website_sn'];
        }
        if (isset($this->request->get['filter_product'])) {
            $url .= '&filter_product=' . $this->request->get['filter_product'];
        }
        if (isset($this->request->get['filter_domain'])) {
            $url .= '&filter_domain=' . urlencode(html_entity_decode($this->request->get['filter_domain'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_customer'])) {
            $url .= '&filter_customer=' . urlencode(html_entity_decode($this->request->get['filter_customer'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_status'])) {
            $url .= '&filter_status=' . $this->request->get['filter_status'];
        }
        if (isset($this->request->get['filter_in_charge'])) {
            $url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
        }

        if (isset($this->request->get['filter_modified_start'])) {
            $url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
        }

        if (isset($this->request->get['filter_modified_end'])) {
            $url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
        }

        if (isset($this->request->get['sort'])) {
            $url .= '&sort=' . $this->request->get['sort'];
        }

        if (isset($this->request->get['order'])) {
            $url .= '&order=' . $this->request->get['order'];
        }

        if (isset($this->request->get['page'])) {
            $url .= '&page=' . $this->request->get['page'];
        }

        $data['breadcrumbs'] = array();

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('text_home'),
            'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
        );

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('heading_title'),
            'href' => $this->url->link('service/website', 'token=' . $this->session->data['token'] . $url, 'SSL')
        );
        $this->load->model('catalog/product');
        $data['products'] = $this->model_catalog_product->getProducts();

        $data['add'] = $this->url->link('service/website/add', 'token=' . $this->session->data['token'], 'SSL');

        $data['websites'] = array();

        $filter_data = array(
            'filter_website_sn'     => $filter_website_sn,
            'filter_product'        => $filter_product,
            'filter_domain'         => $filter_domain,
            'filter_customer'       => $filter_customer,
            'filter_in_charge'      => $filter_in_charge,
            'filter_status'         => $filter_status,
            'filter_modified_start' => $filter_modified_start,
            'filter_modified_end'   => $filter_modified_end,
            'filter_message'        => $filter_message,
            'sort'                  => $sort,
            'order'                 => $order,
            'start'                 => ($page - 1) * $this->config->get('config_limit_admin'),
            'limit'                 => $this->config->get('config_limit_admin')
        );

        $total = $this->model_service_website->getTotalWebsites($filter_data);

        $results = $this->model_service_website->getWebsites($filter_data);
        foreach ($results as $result) {

            $msg = $this->model_service_website->getUnreadMessage($result['website_id']);
            if(empty($result['product'])){
                $product = sprintf(getBSTagStyle(2),$this->language->get('text_unknown'));
            }else{
                $product = sprintf(getBSTagStyle(0),$result['product']);
            }
            $data['websites'][] = array(
                'website_id'        => $result['website_id'],
                'website_sn'        => $result['website_sn'],
                'product_id'        => $result['product_id'],
                'product'           => $product,
                'domain'            => $result['domain'],
                'customer'          => $result['customer'],
                'company'           => $result['company'],
                'in_charge'         => $result['in_charge'],
                'status'            => $result['status'],
                'status_text'       => $result['status'] ? $this->language->get('text_active') : $this->language->get('text_stop'),
                'charger'           => $result['charger'],
                'ads'               => $result['ads'],
                'ad_list'           => $this->url->link('service/advertise', 'token=' . $this->session->data['token'] . '&website_id=' . $result['website_id'] . $url, 'SSL'),
                'ad_new'            => $this->url->link('service/advertise/add', 'token=' . $this->session->data['token'] . '&website_id=' . $result['website_id'] . $url, 'SSL'),
                'msg'               => $msg,
                'date_added'        => date('Y-m-d', strtotime($result['date_added'])).'<br>'.date('H:i:s',strtotime($result['date_added'])),
                'date_modified'     => date('Y-m-d', strtotime($result['date_modified'])).'<br>'.date('H:i:s',strtotime($result['date_modified'])),
                'edit'              => $this->url->link('service/website/edit', 'token=' . $this->session->data['token'] . '&website_id=' . $result['website_id'] . $url, 'SSL'),
                'delete'            => $this->url->link('service/website/delete', 'token=' . $this->session->data['token'] . '&website_id=' . $result['website_id'] . $url, 'SSL'),
                'history'           => $this->url->link('service/website/history', 'token=' . $this->session->data['token'] . '&website_id=' . $result['website_id'] . $url, 'SSL'),
            );
        }

        $data['heading_title'] = $this->language->get('heading_title');
        
        $data['text_list'] = $this->language->get('text_list');
        $data['text_no_results'] = $this->language->get('text_no_results');
        $data['text_confirm'] = $this->language->get('text_confirm');
        $data['text_missing'] = $this->language->get('text_missing');
        $data['text_stop'] = $this->language->get('text_stop');
        $data['text_confirm_save'] = $this->language->get('text_confirm_save');
        $data['text_confirm_new'] = $this->language->get('text_confirm_new');
        $data['text_title_new'] = $this->language->get('text_title_new');
        $data['text_title_history'] = $this->language->get('text_title_history');
        $data['error_product'] = $this->language->get('error_product');
        $data['error_no_customer'] = $this->language->get('error_no_customer');
        $data['error_domain'] = $this->language->get('error_domain');
        $data['error_domain_invalid'] = $this->language->get('error_domain_invalid');

        $data['column_product'] = $this->language->get('column_product');
        $data['column_domain'] = $this->language->get('column_domain');
        $data['column_customer'] = $this->language->get('column_customer');
        $data['column_status'] = $this->language->get('column_status');
        $data['column_ads'] = $this->language->get('column_ads');
        $data['column_in_charge'] = $this->language->get('column_in_charge');
        $data['column_date_added'] = $this->language->get('column_date_added');
        $data['column_date_modified'] = $this->language->get('column_date_modified');
        $data['column_id'] = $this->language->get('column_id');
        $data['column_sn'] = $this->language->get('column_sn');
        $data['column_action'] = $this->language->get('column_action');

        $data['entry_product'] = $this->language->get('entry_product');
        $data['entry_website_sn'] = $this->language->get('entry_website_sn');
        $data['entry_domain'] = $this->language->get('entry_domain');
        $data['entry_customer'] = $this->language->get('entry_customer');
        $data['entry_in_charge'] = $this->language->get('entry_in_charge');
        $data['entry_status'] = $this->language->get('entry_status');
        $data['entry_note'] = $this->language->get('entry_note');
        $data['entry_date_added'] = $this->language->get('entry_date_added');
        $data['entry_modified_start'] = $this->language->get('entry_modified_start');
        $data['entry_modified_end'] = $this->language->get('entry_modified_end');

        $data['button_add'] = $this->language->get('button_add');
        $data['button_new_ad'] = $this->language->get('button_new_ad');
        $data['button_edit'] = $this->language->get('button_edit');
        $data['button_delete'] = $this->language->get('button_delete');
        $data['button_save'] = $this->language->get('button_save');
        $data['button_close'] = $this->language->get('button_close');
        $data['button_filter'] = $this->language->get('button_filter');
        $data['button_view'] = $this->language->get('button_view');
        $data['button_history'] = $this->language->get('button_history');
        
        $data['token'] = $this->session->data['token'];

        if (isset($this->error['warning'])) {
            $data['error_warning'] = $this->error['warning'];
        } else {
            $data['error_warning'] = '';
        }

        if (isset($this->session->data['success'])) {
            $data['success'] = $this->session->data['success'];

            unset($this->session->data['success']);
        } else {
            $data['success'] = '';
        }

        if (isset($this->request->post['selected'])) {
            $data['selected'] = (array)$this->request->post['selected'];
        } else {
            $data['selected'] = array();
        }

        $url = '';
        if (isset($this->request->get['filter_website_sn'])) {
            $url .= '&filter_website_sn=' . $this->request->get['filter_website_sn'];
        }
        if (isset($this->request->get['filter_product'])) {
            $url .= '&filter_product=' . $this->request->get['filter_product'];
        }
        if (isset($this->request->get['filter_domain'])) {
            $url .= '&filter_domain=' . urlencode(html_entity_decode($this->request->get['filter_domain'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_customer'])) {
            $url .= '&filter_customer=' . urlencode(html_entity_decode($this->request->get['filter_customer'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_status'])) {
            $url .= '&filter_status=' . $this->request->get['filter_status'];
        }
        if (isset($this->request->get['filter_in_charge'])) {
            $url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
        }
        if (isset($this->request->get['filter_modified_start'])) {
            $url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
        }

        if (isset($this->request->get['filter_modified_end'])) {
            $url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
        }

        if ($order == 'ASC') {
            $url .= '&order=DESC';
        } else {
            $url .= '&order=ASC';
        }

        if (isset($this->request->get['page'])) {
            $url .= '&page=' . $this->request->get['page'];
        }
        $data['sort_sn'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.website_sn' . $url, 'SSL');
        $data['sort_domain'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.domain' . $url, 'SSL');
        $data['sort_product'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.product_id' . $url, 'SSL');
        $data['sort_customer'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=customer' . $url, 'SSL');
        $data['sort_status'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=status' . $url, 'SSL');
        $data['sort_in_charge'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.in_charge' . $url, 'SSL');
        $data['sort_date_added'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.date_added' . $url, 'SSL');
        $data['sort_date_modified'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] . '&sort=w.date_modified' . $url, 'SSL');

        $url = '';
        if (isset($this->request->get['filter_website_sn'])) {
            $url .= '&filter_website_sn=' . $this->request->get['filter_website_sn'];
        }
        if (isset($this->request->get['filter_product'])) {
            $url .= '&filter_product=' . $this->request->get['filter_product'];
        }
        if (isset($this->request->get['filter_domain'])) {
            $url .= '&filter_domain=' . urlencode(html_entity_decode($this->request->get['filter_domain'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_customer'])) {
            $url .= '&filter_customer=' . urlencode(html_entity_decode($this->request->get['filter_customer'], ENT_QUOTES, 'UTF-8'));
        }
        if (isset($this->request->get['filter_status'])) {
            $url .= '&filter_status=' . $this->request->get['filter_status'];
        }
        if (isset($this->request->get['filter_in_charge'])) {
            $url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
        }
        if (isset($this->request->get['filter_modified_start'])) {
            $url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
        }

        if (isset($this->request->get['filter_modified_end'])) {
            $url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
        }

        if (isset($this->request->get['sort'])) {
            $url .= '&sort=' . $this->request->get['sort'];
        }

        if (isset($this->request->get['order'])) {
            $url .= '&order=' . $this->request->get['order'];
        }

        $pagination = new Pagination();
        $pagination->total = $total;
        $pagination->page = $page;
        $pagination->limit = $this->config->get('config_limit_admin');
        $pagination->url = $this->url->link('service/website', 'token=' . $this->session->data['token'] . $url . '&page={page}', 'SSL');

        $data['pagination'] = $pagination->render();

        $data['results'] = sprintf($this->language->get('text_pagination'), ($total) ? (($page - 1) * $this->config->get('config_limit_admin')) + 1 : 0, ((($page - 1) * $this->config->get('config_limit_admin')) > ($total - $this->config->get('config_limit_admin'))) ? $total : ((($page - 1) * $this->config->get('config_limit_admin')) + $this->config->get('config_limit_admin')), $total, ceil($total / $this->config->get('config_limit_admin')));

        $data['filter_website_sn'] = $filter_website_sn;
        $data['filter_product'] = $filter_product;
        $data['filter_domain'] = $filter_domain;
        $data['filter_customer'] = $filter_customer;
        $data['filter_in_charge'] = $filter_in_charge;
        $data['filter_status'] = $filter_status;
        $data['filter_modified_start'] = $filter_modified_start;
        $data['filter_modified_end'] = $filter_modified_end;

        $this->load->model('user/user');
        $data['users'] = $this->model_user_user->getUsers();

        $this->load->model('customer/customer');
        $data['customers'] = $this->user->getCustomers();

        $this->load->model('catalog/product');
        $data['products'] = $this->model_catalog_product->getProducts();

        $data['sort'] = $sort;
        $data['order'] = $order;

        $data['header'] = $this->load->controller('common/header');
        $data['column_left'] = $this->load->controller('common/column_left');
        $data['footer'] = $this->load->controller('common/footer');

        $this->response->setOutput($this->load->view('service/website.tpl', $data));
    }


    protected function validate($route) {
        if (!$this->user->hasPermission($route)) {
            $this->error['warning'] = $this->language->get('error_permission');
        }
        if(isset($this->request->post['domain']) && !isURL(htmlspecialchars_decode($this->request->post['domain']))){
            $this->error['domain'] = $this->language->get('error_domain');     
        }
        if(isset($this->request->post['product_id']) && !$this->request->post['product_id']){
            $this->error['product'] = $this->language->get('error_product');     
        }

        if(isset($this->request->post['field']) && strtolower($this->request->post['field'])=='domain'){
            if(!isURL(htmlspecialchars_decode($this->request->post['value']))){
                $this->error['domain'] = $this->language->get('error_domain');       
            }
        }
        if(isset($this->request->post['field']) && strtolower($this->request->post['field'])=='product_id'){
            if(!$this->request->post['value']){
                $this->error['product'] = $this->language->get('error_product');       
            }
        }
        return !$this->error;
    }

    public function history() {
        $this->load->language('service/website');
        $this->load->model('service/website');

        $data['text_no_results'] = $this->language->get('text_no_results');
        $data['column_date_added'] = $this->language->get('column_date_added');
        $data['column_status'] = $this->language->get('column_status');
        $data['column_note'] = $this->language->get('column_note');
        $data['column_from'] = $this->language->get('column_from');
        $data['column_operator'] = $this->language->get('column_operator');

        if (isset($this->request->get['page'])) {
            $page = $this->request->get['page'];
        } else {
            $page = 1;
        }

        $data['histories'] = array();

        $this->load->model('service/website');

        $results = $this->model_service_website->getWebsiteHistories($this->request->get['website_id'], ($page - 1) * 10, 10);

        foreach ($results as $result) {

            $operator = '';
            if($result['customer_id']){
                $operator = ' -- ';
            }else if($result['in_charge']){
                $operator = '<span class="label label-default">'.$this->language->get('text_backend').'</span>';
            }
            $data['histories'][] = array(
                'from'       => $result['from']=='member' ? $this->language->get('entry_from_member') : $this->language->get('entry_from_backend'),
                'operator'   => $operator,
                'status'     => $result['status'] ? $this->language->get('text_active') : $this->language->get('text_stop'),
                'note'       => nl2br($result['note']),
                'date_added' => date('Y-m-d', strtotime($result['date_added'])).'<br>'.date('H:i:s', strtotime($result['date_added']))
            );
        }

        $history_total = $this->model_service_website->getTotalWebsiteHistories($this->request->get['website_id']);

        $pagination = new Pagination();
        $pagination->total = $history_total;
        $pagination->page = $page;
        $pagination->limit = 10;
        $pagination->url = $this->url->link('service/website/history', '&website_id=' . $this->request->get['website_id'] . '&page={page}', 'SSL');

        $data['pagination'] = $pagination->render();

        $data['results'] = sprintf($this->language->get('text_pagination'), ($history_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($history_total - 10)) ? $history_total : ((($page - 1) * 10) + 10), $history_total, ceil($history_total / 10));

        $this->response->setOutput($this->load->view('service/ws_history.tpl', $data));
    }

    function tracking(){
        $this->load->language('service/website');
        $this->load->model('service/website');
        $this->load->model('tool/image');
        $website_id = isset($this->request->post['website_id']) ? (int)$this->request->post['website_id'] : false;
        if (($this->request->server['REQUEST_METHOD'] == 'POST') && isset($this->request->post['text'])){
            $this->model_service_website->readMessage($website_id);
            $this->model_service_website->addWebsiteTracking($website_id,$this->request->post);
        }
        $data['website_id'] = $website_id;

        $data['button_send'] = $this->language->get('button_send');
        $data['token'] = $this->session->data['token'];
        $data['button_delete'] = $this->language->get('button_delete');
        $data['button_download'] = $this->language->get('button_download');
        $trackings = $this->model_service_website->getWebsiteTrackings($website_id);
        if(is_array($trackings)){
            foreach ($trackings as $key => $item) {
                $trackings[$key]['date'] = date('Y-m-d',strtotime($item['date_added']));
                $trackings[$key]['time'] = date('H:i:s',strtotime($item['date_added']));
                $file = array();
                if(!empty($item['attach'])){
                    $attaches = json_decode($item['attach'],true);
                    if(is_array($attaches)){
                        foreach ($attaches as $attach) {
                            if(!isset($attach['path']) || !file_exists($attach['path'])){
                                continue;
                            }
                            $_path = substr($attach['path'],strpos($attach['path'],'/')+1);
                            $file[] = array(
                                'realpath' => HTTP_CATALOG.$_path,
                                'name' => $attach['name'],
                                'path' => $_path,
                                'image' => $this->model_tool_image->resize($attach['path'], 100, 100,true),
                                'download' => $this->url->download(array('token'=>$this->session->data['token'],'path'=>$attach['path'],'name'=>$attach['name']))
                            );
                        }
                    }
                    
                }
                $trackings[$key]['attach'] = $file;
            }
        }
        $data['trackings'] = $trackings;

        $this->response->setOutput($this->load->view('service/website_tracking.tpl', $data));
    }
}