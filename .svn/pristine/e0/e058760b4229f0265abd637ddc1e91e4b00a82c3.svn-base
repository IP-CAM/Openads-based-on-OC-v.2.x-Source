<?php
class ControllerServicePublish extends Controller {
    private $error = array();

    private $params = array(
        'filter_ad_sn' => 'filter_ad_sn',
        'filter_product' => 'filter_product',
        'filter_ad_account' => 'filter_ad_account',
        'filter_target_url' => 'filter_target_url',
        'filter_customer_id' => 'filter_customer_id',
        'filter_publish' => 'filter_publish',
        'filter_in_charge' => 'filter_in_charge',
        'filter_targeting_sn' => 'filter_targeting_sn',
        'filter_progress' => 'filter_progress',
        'filter_modified_start' => 'filter_modified_start',
        'filter_modified_end' => 'filter_modified_end',
        'sort' => array('default'=>'a.date_modified'),
        'order' => array('default'=>'DESC'),
        'page' => array('default'=>1)
    );

    public function index() {
        $this->load->language('service/publish');

        $this->document->setTitle($this->language->get('heading_title'));
        $this->document->addStyle(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.css');
        $this->document->addScript(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.js');
        $this->document->addStyle(TPL_JS.'fancybox/jquery.fancybox.css?v=2.1.5');
        $this->document->addScript(TPL_JS.'fancybox/jquery.fancybox.pack.js?v=2.1.5');
        $this->document->addScript(TPL_JS.'form.js');

        $this->load->model('service/publish');

        $this->getList();
    }

    public function edit() {
        $this->load->language('service/publish');

        $this->document->setTitle($this->language->get('heading_title'));
        $this->document->addScript(TPL_JS.'form.js');
        $this->document->addScript(TPL_JS.'jquery.json.min.js');
        $this->document->addScript(TPL_JS.'jquery.ajaxupload.js');
        $this->document->addStyle(TPL_JS.'fancybox/jquery.fancybox.css?v=2.1.5');
        $this->document->addScript(TPL_JS.'fancybox/jquery.fancybox.pack.js?v=2.1.5');
        $this->load->model('service/publish');

        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/publish/edit')) {
            $this->model_service_publish->editAdvertise($this->request->get['advertise_id'],$this->request->post);

            $this->session->data['success'] = $this->language->get('text_success');
            $this->params['token'] = $this->session->data['token'];
            $this->response->redirect($this->url->link('service/publish', $this->request->setUrl($this->params), 'SSL'));
        }

        $this->getForm();
    }

    protected function getList() {

        $this->params['token'] = $this->session->data['token'];

        $data['breadcrumbs'] = array();

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('text_home'),
            'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
        );

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('heading_title'),
            'href' => $this->url->link('service/publish', 'token=' . $this->session->data['token'] , 'SSL')
        );

        if (isset($this->error['warning'])) {
            $data['error_warning'] = $this->error['warning'];
        } else {
            $data['error_warning'] = '';
        }

        if (isset($this->session->data['success'])) {
            $data['success'] = $this->session->data['success'];

            unset($this->session->data['success']);
        } else {
            $data['success'] = '';
        }

        if (isset($this->request->post['selected'])) {
            $data['selected'] = (array)$this->request->post['selected'];
        } else {
            $data['selected'] = array();
        }
        $this->load->model('localisation/advertise_publish');
        $data['ad_publishes'] = $this->model_localisation_advertise_publish->getAdvertisePublishes();

        $this->load->model('user/user');
        $data['managers'] = $this->model_user_user->getAdOperators('manager');

        $this->load->model('catalog/product');
        $this->load->model('localisation/targeting');
        $data['products'] = $this->model_catalog_product->getProducts();

        // Filter Data
        $filter_data = $this->request->getFilter($this->params);
        $data = array_merge($data,$filter_data);
        $filter_data['start'] = ($filter_data['page'] - 1) * $this->config->get('config_limit_admin');
        $filter_data['limit'] = $this->config->get('config_limit_admin');

        $this->load->model('customer/customer');
        $data['filter_customer'] = '';
        if($data['filter_customer_id']){
            $customer = $this->model_customer_customer->getCustomer($data['filter_customer_id']);
            $data['filter_customer'] = empty($customer['username']) ? '' : $customer['username'].' '.$customer['nickname'];
        }

        $data['advertises'] = array();
        $results = $this->model_service_publish->getAdvertises($filter_data);
        foreach ($results as $result) {
            $customer = $this->model_customer_customer->getCustomer($result['customer_id']);
            $charger = $this->model_user_user->getUser($result['in_charge']);
            $msg = $this->model_service_publish->getUnreadMessage($result['advertise_id']);
            $location = array();
            $countries = explode(",", $result['location']);
            if(is_array($countries)){
                foreach ($countries as $country_id) {
                    $targeting = $this->model_localisation_targeting->getTargeting($country_id);
                    if(!empty($targeting['value'])){
                        $location[] = $targeting['name'];
                    }
                }
            }            
            $data['advertises'][] = array(
                'advertise_id'  => $result['advertise_id'],
                'advertise_sn'  => $result['advertise_sn'],
                'ad_account'    => $result['ad_account'],
                'target_url'    => $result['target_url'],
                'targeting_sn'  => $result['targeting_sn'],
                'progress'      => $result['progress'],
                'customer'      => empty($customer['username']) ? '' : $customer['nickname'],
                'charger'       => empty($charger['username']) ? '' : $charger['nickname'],
                'product'       => $this->adstyle->getProductText($result['product_id']),
                'publish_text'  => $this->adstyle->getPublishText($result['publish'],'span'),
                'location'      => implode("<br>", $location),
                'msg'           => $msg,
                'date_modified' => date('Y-m-d', strtotime($result['date_modified'])).'<br>'.date('H:i:s',strtotime($result['date_modified'])),
                'edit'          => $this->url->link('service/publish/edit', 'token=' . $this->session->data['token'] . '&advertise_id=' . $result['advertise_id'] , 'SSL'),
            );
        }
        //Pagination
        $pagination = new Pagination();
        $pagination->total = $this->model_service_publish->getTotalAdvertises($filter_data);
        $pagination->page = $filter_data['page'];
        $pagination->limit = $filter_data['limit'];
        $pagination->url = $this->url->link('service/publish', $this->request->setPageUrl($this->params) . '&page={page}', 'SSL');
        $data['pagination'] = $pagination->render();
        $data['results'] = $pagination->getResults($this->language->get('text_pagination'));

        // Sort Order
        $url = $this->request->setOrderUrl($this->params);
        $data['sort_target_url'] = $this->url->link('service/publish',  $url . '&sort=a.target_url' , 'SSL');
        $data['sort_targeting_sn'] = $this->url->link('service/publish',  $url . '&sort=at.targeting_sn' , 'SSL');
        $data['sort_progress'] = $this->url->link('service/publish',  $url . '&sort=a.progress' , 'SSL');
        $data['sort_ad'] = $this->url->link('service/publish',  $url . '&sort=a.ad_sn' , 'SSL');
        $data['sort_product'] = $this->url->link('service/publish',  $url . '&sort=a.product_id' , 'SSL');
        $data['sort_ad_account'] = $this->url->link('service/publish',  $url . '&sort=a.ad_account' , 'SSL');
        $data['sort_customer'] = $this->url->link('service/publish',  $url . '&sort=customer' , 'SSL');
        $data['sort_publish'] = $this->url->link('service/publish',  $url . '&sort=a.publish' , 'SSL');
        $data['sort_in_charge'] = $this->url->link('service/publish',  $url . '&sort=a.in_charge' , 'SSL');
        $data['sort_date_modified'] = $this->url->link('service/publish',  $url . '&sort=a.date_modified' , 'SSL');
        $data['sort_location'] = $this->url->link('service/publish',  $url . '&sort=at.location' , 'SSL');

        //Page Text
        $this->language->setText($data,array(
            'heading_title' => 'heading_title',
            'text_list' => 'text_list',
            'text_no_results' => 'text_no_results',
            'text_confirm' => 'text_confirm',
            'column_ad_sn' => 'column_ad_sn',
            'column_ad_account' => 'column_ad_account',
            'column_product' => 'column_product',
            'column_target_url' => 'column_target_url',
            'column_customer' => 'column_customer',
            'column_publish' => 'column_publish',
            'column_in_charge' => 'column_in_charge',
            'column_date_modified' => 'column_date_modified',
            'column_progress' => 'column_progress',
            'column_targeting_sn' => 'column_targeting_sn',
            'column_action' => 'column_action',
            'column_location' => 'column_location',

            'entry_ad_sn' => 'entry_ad_sn',
            'entry_ad_account' => 'entry_ad_account',
            'entry_product' => 'entry_product',
            'entry_target_url' => 'entry_target_url',
            'entry_customer' => 'entry_customer',
            'entry_targeting_sn' => 'entry_targeting_sn',
            'entry_progress' => 'entry_progress',
            'entry_in_charge' => 'entry_in_charge',
            'entry_publish' => 'entry_publish',
            'entry_modified_start' => 'entry_modified_start',
            'entry_modified_end' => 'entry_modified_end',

            'button_view' => 'button_view',
            'button_delete' => 'button_delete',
            'button_filter' => 'button_filter',
            'text_filter_toggle' => 'text_filter_toggle',
        ));
        $this->response->setOutput($this->load->view('service/publish_list.tpl', $data,true));
    }

    public function getForm() {

        $data['text_form'] = !isset($this->request->get['advertise_id']) ? $this->language->get('text_add') : $this->language->get('text_edit');
        $data['cancel'] = $this->url->link('service/publish', 'token=' . $this->session->data['token'] , 'SSL');

        $data['token'] = $this->session->data['token'];
        if (isset($this->error['warning'])) {
            $data['error_warning'] = $this->error['warning'];
        } else {
            $data['error_warning'] = '';
        }

        $data['breadcrumbs'] = array();

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('text_home'),
            'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
        );

        $data['breadcrumbs'][] = array(
            'text' => $this->language->get('heading_title'),
            'href' => $this->url->link('service/publish', 'token=' . $this->session->data['token'] , 'SSL')
        );

        $this->load->model('localisation/advertise_publish');
        $data['ad_publishes'] = $this->model_localisation_advertise_publish->getAdvertisePublishes();

        $advertise_id = false;
        if (isset($this->request->get['advertise_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {
            $advertise_id = $this->request->get['advertise_id'];
            $ad_info = $this->model_service_publish->getAdvertise($advertise_id);
        }

        if (!empty($ad_info)) {
            $data['advertise_id'] = $advertise_id;
            $data['advertise_sn'] = $ad_info['advertise_sn'];
            $data['ad_account'] = $ad_info['ad_account'];
            $data['target_url'] = $ad_info['target_url'];
            $data['customer_id'] = $ad_info['customer_id'];
            $data['note'] = $ad_info['note'];
            $data['website'] = $ad_info['website'];
            $data['progress'] = $ad_info['progress'];
            $data['publish'] = $ad_info['publish'];
            $data['date_added'] = date('Y-m-d H:i:s',strtotime($ad_info['date_added']));
            $data['is_in_charge'] = ($this->user->getId() == $ad_info['in_charge']);
            $data['product'] = $this->adstyle->getProductText($ad_info['product_id']);
            $data['publish_text'] = $this->adstyle->getPublishText($ad_info['publish']);
            $data['targeting_sn'] = $this->adstyle->getTargetingSN($ad_info['targeting_id']);

            $this->load->model('user/user');
            $charger = $this->model_user_user->getUser($ad_info['in_charge']);
            $data['charger'] = empty($charger['username']) ? '' : $charger['nickname'];

            $this->load->model('customer/customer');
            $customer = $this->model_customer_customer->getCustomer($ad_info['customer_id']);
            $data['customer'] = empty($customer['username']) ? '' : $customer['nickname'];
        }
        //targeting 

        $data['targeting_tpl'] = $this->component('targeting',$advertise_id);
        $data['post_tpl'] = $this->component('post',$advertise_id);
        $data['photo_tpl'] = $this->component('photo',$advertise_id);
        $data['is_publisher']= $this->user->isPublisher();
        $data['is_promoter']= $this->user->isPromoter();

        $data['publish_terminal'] = $this->config->get('ad_publish_terminal');
        $data['publish_indesign'] = $this->config->get('ad_publish_indesign');
        $this->language->setText($data,array(
            'heading_title' => 'heading_title',
            'text_no_results' => 'text_no_results',
            'text_select' => 'text_select',
            'text_none' => 'text_none',
            'text_history' => 'text_history',
            'text_copy' => 'text_copy',
            'entry_customer' => 'entry_customer',
            'entry_website' => 'entry_website',
            'entry_product' => 'entry_product',
            'entry_target_url' => 'entry_target_url',
            'entry_in_charge' => 'entry_in_charge',
            'entry_date_added' => 'entry_date_added',
            'entry_note' => 'entry_note',
            'entry_publish' => 'entry_publish',
            'entry_status' => 'entry_status',
            'entry_notify' => 'entry_notify',
            'entry_amount' => 'entry_amount',
            'entry_ad_account' => 'entry_ad_account',
            'entry_progress' => 'entry_progress',
            'entry_targeting_sn' => 'entry_targeting_sn',

            'button_save' => 'button_save',
            'button_back' => 'button_back',
            'button_remove' => 'button_remove',
            'button_history_add' => 'button_history_add',

            'tab_general' => 'tab_general',
            'tab_history' => 'tab_history',
            'tab_tracking' => 'tab_tracking',
            'tab_advertise' => 'tab_advertise',
            'tab_targeting' => 'tab_targeting',
            'tab_post' => 'tab_post',
            'tab_photo' => 'tab_photo',
        ));
        $this->response->setOutput($this->load->view('service/publish_form.tpl', $data,true));
    }
    protected function validate() {

        if ( !$this->user->isPublisher() && !$this->user->isPrompter()) {
            $this->error['warning'] = $this->language->get('error_permission');
        }
        return !$this->error;
    }

    public function history() {
        $this->load->language('service/publish');
        $this->load->model('service/publish');
        if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/publish/history')) {

            $this->model_service_publish->addAdvertiseHistory($this->request->get['advertise_id'],$this->request->post);          
            $this->response->addHeader('Content-Type: application/json');
            $this->response->setOutput(json_encode(array('success'=>$this->language->get('text_success'))));
        }else{
            $data['text_no_results'] = $this->language->get('text_no_results');
            $data['column_date_added'] = $this->language->get('column_date_added');
            $data['column_status'] = $this->language->get('column_publish');
            $data['column_note'] = $this->language->get('column_note');
            $data['column_operator'] = $this->language->get('column_operator');

            if (isset($this->request->get['page'])) {
                $page = $this->request->get['page'];
            } else {
                $page = 1;
            }

            $data['histories'] = array();

            $this->load->model('service/publish');

            $results = $this->model_service_publish->getAdvertiseHistories($this->request->get['advertise_id'], ($page - 1) * 10, 10);

            foreach ($results as $result) {

                $operator = '';
                if($result['customer_id']){
                    $operator = $this->language->get('entry_customer');
                }else if($result['in_charge']){
                    $operator = $this->language->get('entry_in_charge');
                }
                $data['histories'][] = array(
                    'notify'     => $result['notify'] ? $this->language->get('text_yes') : $this->language->get('text_no'),
                    'operator'   => $operator,
                    'status'    => $result['publish'] == 1 ? $this->language->get('text_queuing') : $result['publish_text'],
                    'note'       => nl2br($result['note']),
                    'date_added' => date('Y-m-d H:i:s', strtotime($result['date_added']))
                );
            }

            $pagination = new Pagination();
            $pagination->total = $this->model_service_publish->getTotalAdvertiseHistories($this->request->get['advertise_id']);
            $pagination->page = $page;
            $pagination->limit = 10;
            $pagination->url = $this->url->link('service/publish/history', 'token=' . $this->session->data['token'] . '&advertise_id=' . $this->request->get['advertise_id'] . '&page={page}', 'SSL');
            $data['pagination'] = $pagination->render();
            $data['results'] = $pagination->getResults($this->language->get('text_pagination'));

            $this->response->setOutput($this->load->view('service/advertise_history.tpl', $data));
        }
    }

    public function component($mode='targeting',$advertise_id=false){
        $this->load->language('service/publish');

        $this->load->model('service/publish');
        $ad_info = $this->model_service_publish->getAdvertise($advertise_id,true);
        if(!$ad_info){
            $this->response->setOutput($this->load->view('service/component_error.tpl'));
            exit;
        }
        
        $data = $this->model_service_publish->getAdComponent($advertise_id,$mode);
        $data['mode'] = $mode;
        $data['target_url'] = $ad_info['target_url'];
        $data['approve'] = $data['locked'] = $data['relax'] = false;
        $data['heading_title'] = sprintf($this->language->get('title_detail'),ucfirst($mode));
        $data['text_view'] = $this->language->get('text_unsubmit');
        $data['entry_id'] = isset($data[$mode.'_id']) ? (int)$data[$mode.'_id'] : 0;
        switch ($mode) {
            case 'targeting':
                $data['location'] = isset($data['location']) ? explode(",", $data['location']) : array();
                $data['language'] = isset($data['language']) ? explode(",", $data['language']) : array();
                $data['entry_location'] = $this->language->get('entry_location');
                $data['entry_language'] = $this->language->get('entry_language');
                $data['entry_interest'] = $this->language->get('entry_interest');
                $data['entry_behavior'] = $this->language->get('entry_behavior');
                $data['entry_more'] = $this->language->get('entry_more');
                $data['entry_gender'] = $this->language->get('entry_gender');
                $data['entry_age'] = $this->language->get('entry_age');
                $data['entry_age_max'] = $this->language->get('entry_age_max');
                $data['entry_age_min'] = $this->language->get('entry_age_min');
                $data['entry_operator'] = $this->language->get('entry_operator');
                $data['entry_audience'] = $this->language->get('entry_audience');
                $this->load->model('localisation/targeting');
                $data['locations'] = $this->model_localisation_targeting->getTargetingsByCategory('location');
                $data['genders'] = $this->model_localisation_targeting->getTargetingsByCategory('gender');
                $data['languages'] = $this->model_localisation_targeting->getTargetingsByCategory('language');
                $this->load->model('localisation/advertise_targeting');
                $data['targeting_statuses'] = $this->model_localisation_advertise_targeting->getAdvertiseTargetings();
                break;
            case 'post':
                $data['entry_headline'] = $this->language->get('entry_headline');
                $data['entry_post_text'] = $this->language->get('entry_post_text');
                $data['entry_author'] = $this->language->get('entry_author');
                $this->load->model('localisation/advertise_post');
                $data['post_statuses'] = $this->model_localisation_advertise_post->getAdvertisePosts();
                break;
            case 'photo':
                if(!empty($data['file'])){
                    $files = json_decode($data['file'],true);
                    if(is_array($files)){
                        $file = array();
                        $this->load->model('tool/image');
                        foreach ($files as $item) {
                            if (file_exists($item['path'])) {
                                $file[] = array(
                                    'realpath' => HTTP_CATALOG . substr($item['path'], strpos($item['path'], '/') + 1),
                                    'name' => $item['name'],
                                    'path' => $item['path'],
                                    'image' => $this->model_tool_image->resize($item['path'], 470, 245, true),
                                    'download' => $this->url->download(array('token' => $this->session->data['token'], 'path' => $item['path'])),
                                );
                            }
                        }
                        $data['file'] = $file ? $file : false;
                    }
                }
                $data['entry_post_img'] = $this->language->get('entry_post_img');
                $data['entry_artist'] = $this->language->get('entry_artist');
                $this->load->model('localisation/advertise_photo');
                $data['photo_statuses'] = $this->model_localisation_advertise_photo->getAdvertisePhotos();

                break;
        }
        
        $data['token'] = $this->session->data['token'];
        $this->language->setText($data,array(
            'entry_target_url' => 'entry_target_url',
            'entry_user' => 'entry_user',
            'entry_product' => 'entry_product',
            'entry_note' => 'entry_note',
            'entry_status' => 'entry_status',
            'entry_view' => 'entry_view',
            'text_empty' => 'text_empty',
            'text_copy' => 'text_copy',
            'text_confirm' => 'text_confirm',
            'button_save' => 'button_save',
            'button_close' => 'button_close',
        ));

        return $this->load->view('service/component_'.$mode.'.tpl', $data);
    }

    function tracking(){
        $this->load->language('service/publish');
        $this->load->model('service/publish');
        $this->load->model('tool/image');
        $advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
        if (($this->request->server['REQUEST_METHOD'] == 'POST') && isset($this->request->post['text'])){
            $this->model_service_publish->readMessage($advertise_id);
            $this->model_service_publish->addAdvertiseTracking($advertise_id,$this->request->post);
        }
        $data['advertise_id'] = $advertise_id;
        $data['token'] = $this->session->data['token'];

        $data['button_send'] = $this->language->get('button_send');
        $data['button_delete'] = $this->language->get('button_delete');
        $data['button_download'] = $this->language->get('button_download');
        $data['error_content'] = $this->language->get('error_content');
        $trackings = $this->model_service_publish->getAdvertiseTrackings($advertise_id);
        if(is_array($trackings)){
            foreach ($trackings as $key => $item) {
                $trackings[$key]['date'] = date('Y-m-d',strtotime($item['date_added']));
                $trackings[$key]['time'] = date('H:i:s',strtotime($item['date_added']));
                $file = array();
                if(!empty($item['attach'])){
                    $attaches = json_decode($item['attach'],true);
                    if(is_array($attaches)){
                        foreach ($attaches as $attach) {
                            if(!isset($attach['path']) || !file_exists($attach['path'])){
                                continue;
                            }
                            $_path = substr($attach['path'],strpos($attach['path'],'/')+1);
                            $file[] = array(
                                'realpath' => HTTP_CATALOG.$_path,
                                'name' => $attach['name'],
                                'path' => $_path,
                                'image' => $this->model_tool_image->resize($attach['path'], 100, 100,true),
                                'download' => $this->url->download(array('token'=>$this->session->data['token'],'path'=>$attach['path'],'name'=>$attach['name']))
                            );
                        }
                    }
                }
                $trackings[$key]['attach'] = $file;
            }
        }
        $data['trackings'] = $trackings;

        $this->response->setOutput($this->load->view('service/message.tpl', $data));
    }
    public function edit_ad_account(){
        $this->language->load('service/publish');
        if($this->validate()) {
            if (isset($this->request->post['advertise_id'])) {
                $this->load->model('service/publish');
                $this->model_service_publish->edit_ad_account($this->request->post);
                die(json_encode(array('msg' =>  $this->language->get('text_success_account'))));
            }
        }else{
            die(json_encode(array('msg' => $this->language->get('error_permission'))));
        }
    }
}