<?php
class ControllerServiceAdvertiseAudit extends Controller {
	private $error = array();

	public function index() {
		$this->load->language('service/advertise_audit');

		$this->document->setTitle($this->language->get('heading_title'));

        $this->document->addStyle(TPL_JS.'bootstrap/ui/custom-theme/jquery-ui-1.10.3.custom.css');
        $this->document->addScript(TPL_JS.'bootstrap/ui/custom-theme/jquery-ui-1.10.3.custom.js');
		$this->document->addStyle(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.css');
		$this->document->addScript(TPL_JS.'datetimepicker/bootstrap-datetimepicker.min.js');
		$this->document->addStyle(TPL_JS.'fancybox/jquery.fancybox.css?v=2.1.5');
        $this->document->addScript(TPL_JS.'fancybox/jquery.fancybox.pack.js?v=2.1.5');
		$this->document->addScript(TPL_JS.'form.js');

		$this->load->model('service/advertise_audit');

		$this->getList();
	}

	public function add() {
		$this->load->language('service/advertise_audit');

		$this->document->setTitle($this->language->get('heading_title'));

		$this->load->model('service/advertise_audit');

		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/advertise_audit/add')) {
			$advertise_id = $this->model_service_advertise_audit->addAdvertise($this->request->post);

			$this->session->data['success'] = $this->language->get('text_success');

			$this->response->redirect($this->url->link('service/advertise_audit/edit', 'advertise_id='.$advertise_id.'&token=' . $this->session->data['token'] , 'SSL'));
		}


		$data['heading_title'] = $this->language->get('heading_title');
		
		$data['text_form'] =  $this->language->get('text_add');
		$data['text_no_results'] = $this->language->get('text_no_results');
		$data['text_default'] = $this->language->get('text_default');
		$data['text_select'] = $this->language->get('text_select');
		$data['text_none'] = $this->language->get('text_none');
		$data['text_loading'] = $this->language->get('text_loading');
		$data['text_order'] = $this->language->get('text_order');
		$data['text_history'] = $this->language->get('text_history');
		$data['text_loading'] = $this->language->get('text_loading');

		$data['entry_customer'] = $this->language->get('entry_customer');
		$data['entry_product'] = $this->language->get('entry_product');
		$data['entry_target_url'] = $this->language->get('entry_target_url');
		$data['entry_in_charge'] = $this->language->get('entry_in_charge');
		$data['entry_website'] = $this->language->get('entry_website');
		$data['entry_note'] = $this->language->get('entry_note');
		$data['entry_publish'] = $this->language->get('entry_publish');
		$data['entry_status'] = $this->language->get('entry_status');
		$data['entry_notify'] = $this->language->get('entry_notify');

		$data['button_save'] = $this->language->get('button_save');
		$data['button_cancel'] = $this->language->get('button_cancel');

		$data['token'] = $this->session->data['token'];

		if (isset($this->error['warning'])) {
			$data['error_warning'] = $this->error['warning'];
		} else {
			$data['error_warning'] = '';
		}

		if (isset($this->session->data['success'])) {
			$data['success'] = $this->session->data['success'];

			unset($this->session->data['success']);
		} else {
			$data['success'] = '';
		}

		if (isset($this->error['target_url'])) {
			$data['error_target_url'] = $this->error['target_url'];
		} else {
			$data['error_target_url'] = '';
		}

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('heading_title'),
			'href' => $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] , 'SSL')
		);

		$data['cancel'] = $this->url->link('service/website', 'token=' . $this->session->data['token'] , 'SSL');

		if (isset($this->request->get['website_id'])) {
			$website_id = $this->request->get['website_id'];
		} else {
			$website_id = 0;
		}
		$data['website_id'] = $data['product_id'] = $data['customer_id'] = $data['in_charge'] = 0;
		$data['customer'] = $data['product'] = $data['company'] = $data['charger'] = '';

		$this->load->model('service/website');
		$website_info = $this->model_service_website->getWebsite($website_id);

		if($website_info){
			$data['website_id'] = $website_id;
			$data['product_id'] = $website_info['product_id'];
			$data['customer_id'] = $website_info['customer_id'];
			$data['product'] = $website_info['product'];
			$data['customer'] = $website_info['customer'];
			$data['company'] = $website_info['company'];
			$data['charger'] = $website_info['charger'];
			$data['in_charge'] = $website_info['in_charge'];
		}
		$data['websites'] = $this->model_service_website->getWebsites(array('filter_status'=>1));

		if(!empty($this->request->post['target_url']) ){
			$data['target_url'] = $this->request->post['target_url'];
		}else{
			$data['target_url'] = '';
		}

		if(!empty($this->request->post['note']) ){
			$data['note'] = $this->request->post['note'];
		}else{
			$data['note'] = '';
		}
		
		$data['header'] = $this->load->controller('common/header');
		$data['column_left'] = $this->load->controller('common/column_left');
		$data['footer'] = $this->load->controller('common/footer');

		$this->response->setOutput($this->load->view('service/advertise_audit_new.tpl', $data));
	}

	public function edit() {
		$this->load->language('service/advertise_audit');

		$this->document->setTitle($this->language->get('heading_title'));
		$this->document->addScript(TPL_JS.'form.js');
		$this->document->addScript(TPL_JS.'jquery.json.min.js');
		$this->document->addScript(TPL_JS.'jquery.ajaxupload.js');
		$this->document->addStyle(TPL_JS.'fancybox/jquery.fancybox.css?v=2.1.5');
        $this->document->addScript(TPL_JS.'fancybox/jquery.fancybox.pack.js?v=2.1.5');
		$this->load->model('service/advertise_audit');

		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/advertise_audit/edit')) {
			$this->model_service_advertise_audit->editAdvertise($this->request->get['advertise_id'],$this->request->post);
			

			$this->session->data['success'] = $this->language->get('text_success');

			$url = '';

			if (isset($this->request->get['filter_ad_sn'])) {
				$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
			}

			if (isset($this->request->get['filter_customer_id'])) {
				$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
			}

			if (isset($this->request->get['filter_publish'])) {
				$url .= '&filter_publish=' . $this->request->get['filter_publish'];
			}
			if (isset($this->request->get['filter_in_charge'])) {
				$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
			}

			if (isset($this->request->get['filter_targeting'])) {
				$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
			}
			if (isset($this->request->get['filter_post'])) {
				$url .= '&filter_post=' . $this->request->get['filter_post'];
			}
			if (isset($this->request->get['filter_photo'])) {
				$url .= '&filter_photo=' . $this->request->get['filter_photo'];
			}
			
			if (isset($this->request->get['filter_date_added'])) {
				$url .= '&filter_date_added=' . $this->request->get['filter_date_added'];
			}

			if (isset($this->request->get['filter_date_modified'])) {
				$url .= '&filter_date_modified=' . $this->request->get['filter_date_modified'];
			}

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			$this->response->redirect($this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url, 'SSL'));
		}

		$this->getForm();
	}

	public function delete() {
		$this->load->language('service/advertise_audit');

		$this->document->setTitle($this->language->get('heading_title'));

		$this->load->model('service/advertise_audit');

		if (isset($this->request->get['advertise_id']) && $this->validate('service/advertise_audit/delete')) {

			$this->model_service_advertise_audit->deleteAdvertise($this->request->get['advertise_id']);
			$url = '';

			if (isset($this->request->get['filter_ad_sn'])) {
				$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
			}

			if (isset($this->request->get['filter_customer_id'])) {
				$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
			}

			if (isset($this->request->get['filter_publish'])) {
				$url .= '&filter_publish=' . $this->request->get['filter_publish'];
			}
			if (isset($this->request->get['filter_in_charge'])) {
				$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
			}

			if (isset($this->request->get['filter_targeting'])) {
				$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
			}
			if (isset($this->request->get['filter_post'])) {
				$url .= '&filter_post=' . $this->request->get['filter_post'];
			}
			if (isset($this->request->get['filter_photo'])) {
				$url .= '&filter_photo=' . $this->request->get['filter_photo'];
			}
			
			if (isset($this->request->get['filter_date_added'])) {
				$url .= '&filter_date_added=' . $this->request->get['filter_date_added'];
			}

			if (isset($this->request->get['filter_date_modified'])) {
				$url .= '&filter_date_modified=' . $this->request->get['filter_date_modified'];
			}

			if (isset($this->request->get['sort'])) {
				$url .= '&sort=' . $this->request->get['sort'];
			}

			if (isset($this->request->get['order'])) {
				$url .= '&order=' . $this->request->get['order'];
			}

			if (isset($this->request->get['page'])) {
				$url .= '&page=' . $this->request->get['page'];
			}

			$this->response->redirect($this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url, 'SSL'));
		}

		$this->getList();
	}

	protected function getList() {

		if (isset($this->request->get['filter_ad_sn'])) {
			$filter_ad_sn = $this->request->get['filter_ad_sn'];
		} else {
			$filter_ad_sn = null;
		}
		if (isset($this->request->get['filter_product'])) {
			$filter_product = $this->request->get['filter_product'];
		} else {
			$filter_product = null;
		}
		if (isset($this->request->get['filter_target_url'])) {
			$filter_target_url = $this->request->get['filter_target_url'];
		} else {
			$filter_target_url = null;
		}
		if (isset($this->request->get['filter_customer_id'])) {
			$filter_customer_id = $this->request->get['filter_customer_id'];
		} else {
			$filter_customer_id = null;
		}

		if (isset($this->request->get['filter_publish'])) {
			$filter_publish = $this->request->get['filter_publish'];
		} else {
			$filter_publish = null;
		}

		if (isset($this->request->get['filter_in_charge'])) {
			$filter_in_charge = $this->request->get['filter_in_charge'];
		} else {
			$filter_in_charge = null;
		}

		if (isset($this->request->get['filter_targeting'])) {
			$filter_targeting = $this->request->get['filter_targeting'];
		} else {
			$filter_targeting = null;
		}

		if (isset($this->request->get['filter_post'])) {
			$filter_post = $this->request->get['filter_post'];
		} else {
			$filter_post = null;
		}

		if (isset($this->request->get['filter_photo'])) {
			$filter_photo = $this->request->get['filter_photo'];
		} else {
			$filter_photo = null;
		}

		if (isset($this->request->get['filter_modified_start'])) {
			$filter_modified_start = $this->request->get['filter_modified_start'];
		} else {
			$filter_modified_start = null;
		}

		if (isset($this->request->get['filter_modified_end'])) {
			$filter_modified_end = $this->request->get['filter_modified_end'];
		} else {
			$filter_modified_end = null;
		}

		if (isset($this->request->get['filter_message'])) {
			$filter_message = $this->request->get['filter_message'];
		} else {
			$filter_message = null;
		}

		if (isset($this->request->get['sort'])) {
			$sort = $this->request->get['sort'];
		} else {
			$sort = 'a.date_modified';
		}

		if (isset($this->request->get['order'])) {
			$order = $this->request->get['order'];
		} else {
			$order = 'DESC';
		}

		if (isset($this->request->get['page'])) {
			$page = $this->request->get['page'];
		} else {
			$page = 1;
		}

		$url = '';

		if (isset($this->request->get['filter_ad_sn'])) {
			$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
		}
		if (isset($this->request->get['filter_product'])) {
			$url .= '&filter_product=' . $this->request->get['filter_product'];
		}
		if (isset($this->request->get['filter_target_url'])) {
			$url .= '&filter_target_url=' . urlencode(html_entity_decode($this->request->get['filter_target_url'], ENT_QUOTES, 'UTF-8'));
		}
		if (isset($this->request->get['filter_customer_id'])) {
			$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
		}
		if (isset($this->request->get['filter_publish'])) {
			$url .= '&filter_publish=' . $this->request->get['filter_publish'];
		}
		if (isset($this->request->get['filter_in_charge'])) {
			$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
		}
		if (isset($this->request->get['filter_targeting'])) {
			$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
		}
		if (isset($this->request->get['filter_post'])) {
			$url .= '&filter_post=' . $this->request->get['filter_post'];
		}
		if (isset($this->request->get['filter_photo'])) {
			$url .= '&filter_photo=' . $this->request->get['filter_photo'];
		}
		if (isset($this->request->get['filter_modified_start'])) {
			$url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
		}

		if (isset($this->request->get['filter_modified_end'])) {
			$url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
		}

		if (isset($this->request->get['sort'])) {
			$url .= '&sort=' . $this->request->get['sort'];
		}

		if (isset($this->request->get['order'])) {
			$url .= '&order=' . $this->request->get['order'];
		}

		if (isset($this->request->get['page'])) {
			$url .= '&page=' . $this->request->get['page'];
		}

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('heading_title'),
			'href' => $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url, 'SSL')
		);
		$this->load->model('customer/customer');
		$this->load->model('catalog/product');
		$data['products'] = $this->model_catalog_product->getProducts();

		$data['add'] = $this->url->link('service/advertise_audit/add', 'token=' . $this->session->data['token'], 'SSL');
		$data['mode_action'] = htmlspecialchars_decode($this->url->link('service/advertise_audit/ajax_data','token='.$this->session->data['token'],'SSL'));
		$limit = $this->config->get('config_limit_admin');
		$data['advertises'] = array();

		$filter_data = array(
			'filter_ad_sn'      	=> $filter_ad_sn,
			'filter_product'      	=> $filter_product,
			'filter_target_url'	   	=> $filter_target_url,
			'filter_customer_id'	=> $filter_customer_id,
			'filter_in_charge'     	=> $filter_in_charge,
			'filter_targeting'	  	=> $filter_targeting,
			'filter_post'	  		=> $filter_post,
			'filter_photo'	  		=> $filter_photo,
			'filter_publish'  		=> $filter_publish,
			'filter_modified_start' => $filter_modified_start,
			'filter_modified_end' 	=> $filter_modified_end,
			'filter_message'		=> $filter_message,
			'sort'                 	=> $sort,
			'order'                	=> $order,
			'start'                	=> ($page - 1) * $limit,
			'limit'                	=> $limit
		);

		$total = $this->model_service_advertise_audit->getTotalAdvertises($filter_data);
		$results = $this->model_service_advertise_audit->getAdvertises($filter_data);
		foreach ($results as $result) {

			$targeting = $this->load_component($result['advertise_id'],'targeting');
			$post = $this->load_component($result['advertise_id'],'post');
			$photo = $this->load_component($result['advertise_id'],'photo');
			$product_info = $this->model_catalog_product->getProduct($result['product_id']);
			if(empty($product_info['name'])){
				$product = sprintf(getBSTagStyle(2),$this->language->get('text_unknown'));
			}else{
				$product = sprintf(getBSTagStyle(0),$product_info['name']);
			}

			$msg = $this->model_service_advertise_audit->getUnreadMessage($result['advertise_id']);
			$data['advertises'][] = array(
				'advertise_id'  => $result['advertise_id'],
				'advertise_sn'  => $result['advertise_sn'],
				'product'		=> $product,
				'domain'    	=> $result['domain'],
				'status'    	=> $result['website_status'],
				'status_text'   => $result['website_status'] ? $this->language->get('text_active') : $this->language->get('text_stop'),
				'target_url'    => $result['target_url'],
				'customer'    	=> $result['customer'],
				'company'     	=> $result['company'],
				'charger'    	=> $result['charger'],
				'publish'      	=> $result['publish'],
				'publish_text'  => $result['publish_text'],
				'targeting'		=> $targeting,
				'post'			=> $post,
				'photo'			=> $photo,
				'msg'			=> $msg,
				'date_added'	=> date('Y-m-d', strtotime($result['date_added'])).'<br>'.date('H:i:s',strtotime($result['date_added'])),
				'date_modified' => date('Y-m-d', strtotime($result['date_modified'])).'<br>'.date('H:i:s',strtotime($result['date_modified'])),
				'edit'         	=> $this->url->link('service/advertise_audit/edit', 'token=' . $this->session->data['token'] . '&advertise_id=' . $result['advertise_id'] . $url, 'SSL'),
			);
		}

		$data['heading_title'] = $this->language->get('heading_title');
		
		$data['text_list'] = $this->language->get('text_list');
		$data['text_no_results'] = $this->language->get('text_no_results');
		$data['text_confirm'] = $this->language->get('text_confirm');
		$data['text_missing'] = $this->language->get('text_missing');
		$data['text_confirm_bulk'] = $this->language->get('text_confirm_bulk');
		$data['text_confirm_approve'] = $this->language->get('text_confirm_approve');

		$data['column_ad_sn'] = $this->language->get('column_ad_sn');
		$data['column_website'] = $this->language->get('column_website');
		$data['column_product'] = $this->language->get('column_product');
		$data['column_target_url'] = $this->language->get('column_target_url');
		$data['column_customer'] = $this->language->get('column_customer');
		$data['column_publish'] = $this->language->get('column_publish');
		$data['column_in_charge'] = $this->language->get('column_in_charge');
		$data['column_targeting'] = $this->language->get('column_targeting');
		$data['column_post'] = $this->language->get('column_post');
		$data['column_photo'] = $this->language->get('column_photo');
		$data['column_date_added'] = $this->language->get('column_date_added');
		$data['column_date_modified'] = $this->language->get('column_date_modified');
		$data['column_action'] = $this->language->get('column_action');

		$data['entry_ad_sn'] = $this->language->get('entry_ad_sn');
		$data['entry_product'] = $this->language->get('entry_product');
		$data['entry_target_url'] = $this->language->get('entry_target_url');
		$data['entry_customer'] = $this->language->get('entry_customer');
		$data['entry_in_charge'] = $this->language->get('entry_in_charge');
		$data['entry_targeting'] = $this->language->get('entry_targeting');
		$data['entry_post'] = $this->language->get('entry_post');
		$data['entry_photo'] = $this->language->get('entry_photo');
		$data['entry_publish'] = $this->language->get('entry_publish');
		$data['entry_note'] = $this->language->get('entry_note');
		$data['entry_date_added'] = $this->language->get('entry_date_added');
		$data['entry_modified_start'] = $this->language->get('entry_modified_start');
		$data['entry_modified_end'] = $this->language->get('entry_modified_end');

		$data['button_add'] = $this->language->get('button_add');
		$data['button_edit'] = $this->language->get('button_edit');
		$data['button_preview'] = $this->language->get('button_preview');
		$data['button_delete'] = $this->language->get('button_delete');
		$data['button_filter'] = $this->language->get('button_filter');
		$data['button_view'] = $this->language->get('button_view');
		$data['button_approve'] = $this->language->get('button_approve');
		
		$data['token'] = $this->session->data['token'];

		if (isset($this->error['warning'])) {
			$data['error_warning'] = $this->error['warning'];
		} else {
			$data['error_warning'] = '';
		}

		if (isset($this->session->data['success'])) {
			$data['success'] = $this->session->data['success'];

			unset($this->session->data['success']);
		} else {
			$data['success'] = '';
		}

		if (isset($this->request->post['selected'])) {
			$data['selected'] = (array)$this->request->post['selected'];
		} else {
			$data['selected'] = array();
		}

		$url = '';

		if (isset($this->request->get['filter_ad_sn'])) {
			$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
		}
		if (isset($this->request->get['filter_product'])) {
			$url .= '&filter_product=' . $this->request->get['filter_product'];
		}
		if (isset($this->request->get['filter_target_url'])) {
			$url .= '&filter_target_url=' . urlencode(html_entity_decode($this->request->get['filter_target_url'], ENT_QUOTES, 'UTF-8'));
		}
		if (isset($this->request->get['filter_customer_id'])) {
			$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
		}
		if (isset($this->request->get['filter_publish'])) {
			$url .= '&filter_publish=' . $this->request->get['filter_publish'];
		}
		if (isset($this->request->get['filter_in_charge'])) {
			$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
		}
		if (isset($this->request->get['filter_targeting'])) {
			$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
		}
		if (isset($this->request->get['filter_post'])) {
			$url .= '&filter_post=' . $this->request->get['filter_post'];
		}
		if (isset($this->request->get['filter_photo'])) {
			$url .= '&filter_photo=' . $this->request->get['filter_photo'];
		}
		if (isset($this->request->get['filter_modified_start'])) {
			$url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
		}

		if (isset($this->request->get['filter_modified_end'])) {
			$url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
		}

		if ($order == 'ASC') {
			$url .= '&order=DESC';
		} else {
			$url .= '&order=ASC';
		}

		if (isset($this->request->get['page'])) {
			$url .= '&page=' . $this->request->get['page'];
		}
		$data['sort_target_url'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.target_url' . $url, 'SSL');
		$data['sort_ad'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.advertise_sn' . $url, 'SSL');
		$data['sort_product'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.product_id' . $url, 'SSL');
		$data['sort_customer'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=customer' . $url, 'SSL');
		$data['sort_publish'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=publish' . $url, 'SSL');
		$data['sort_in_charge'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.in_charge' . $url, 'SSL');
		$data['sort_targeting'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.targeting_id' . $url, 'SSL');
		$data['sort_post'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.post_id' . $url, 'SSL');
		$data['sort_photo'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.photo_id' . $url, 'SSL');
		$data['sort_date_added'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.date_added' . $url, 'SSL');
		$data['sort_date_modified'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . '&sort=a.date_modified' . $url, 'SSL');

		$url = '';

		if (isset($this->request->get['filter_ad_sn'])) {
			$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
		}
		if (isset($this->request->get['filter_product'])) {
			$url .= '&filter_product=' . $this->request->get['filter_product'];
		}
		if (isset($this->request->get['filter_target_url'])) {
			$url .= '&filter_target_url=' . urlencode(html_entity_decode($this->request->get['filter_target_url'], ENT_QUOTES, 'UTF-8'));
		}
		if (isset($this->request->get['filter_customer_id'])) {
			$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
		}
		if (isset($this->request->get['filter_publish'])) {
			$url .= '&filter_publish=' . $this->request->get['filter_publish'];
		}
		if (isset($this->request->get['filter_in_charge'])) {
			$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
		}
		if (isset($this->request->get['filter_targeting'])) {
			$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
		}
		if (isset($this->request->get['filter_post'])) {
			$url .= '&filter_post=' . $this->request->get['filter_post'];
		}
		if (isset($this->request->get['filter_photo'])) {
			$url .= '&filter_photo=' . $this->request->get['filter_photo'];
		}
		if (isset($this->request->get['filter_modified_start'])) {
			$url .= '&filter_modified_start=' . $this->request->get['filter_modified_start'];
		}

		if (isset($this->request->get['filter_modified_end'])) {
			$url .= '&filter_modified_end=' . $this->request->get['filter_modified_end'];
		}

		if (isset($this->request->get['sort'])) {
			$url .= '&sort=' . $this->request->get['sort'];
		}

		if (isset($this->request->get['order'])) {
			$url .= '&order=' . $this->request->get['order'];
		}

		$pagination = new Pagination();
		$pagination->total = $total;
		$pagination->page = $page;
		$pagination->limit = $limit;
		$pagination->url = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url . '&page={page}', 'SSL');

		$data['pagination'] = $pagination->render();

		$data['results'] = sprintf($this->language->get('text_pagination'), ($total) ? (($page - 1) * $limit) + 1 : 0, ((($page - 1) * $limit) > ($total - $limit)) ? $total : ((($page - 1) * $limit) + $limit), $total, ceil($total / $limit));

		$data['filter_ad_sn'] = $filter_ad_sn;
		$data['filter_product'] = $filter_product;
		$data['filter_target_url'] = $filter_target_url;
		$data['filter_customer_id'] = $filter_customer_id;
		$data['filter_in_charge'] = $filter_in_charge;
		$data['filter_targeting'] = $filter_targeting;
		$data['filter_post'] = $filter_post;
		$data['filter_photo'] = $filter_photo;
		$data['filter_publish'] = $filter_publish;
		$data['filter_modified_start'] = $filter_modified_start;
		$data['filter_modified_end'] = $filter_modified_end;
		$data['filter_customer'] = '';
		if($filter_customer_id){
			$customer = $this->model_customer_customer->getCustomer($filter_customer_id);
			$data['filter_customer'] = empty($customer['username']) ? '' : $customer['username'].' '.$customer['nickname'];
		}
		$this->load->model('localisation/advertise_targeting');
		$data['targeting_statuses'] = $this->model_localisation_advertise_targeting->getAdvertiseTargetings();

		$this->load->model('localisation/advertise_post');
		$data['post_statuses'] = $this->model_localisation_advertise_post->getAdvertisePosts();

		$this->load->model('localisation/advertise_photo');
		$data['photo_statuses'] = $this->model_localisation_advertise_photo->getAdvertisePhotos();

		$this->load->model('localisation/advertise_publish');
		$data['ad_publishes'] = $this->model_localisation_advertise_publish->getAdvertisePublishes();

		$this->load->model('user/user');
		$data['contributors'] = $this->model_user_user->getUsers(array('filter_status'=>1));

		$data['sort'] = $sort;
		$data['order'] = $order;

		$data['header'] = $this->load->controller('common/header');
		$data['column_left'] = $this->load->controller('common/column_left');
		$data['footer'] = $this->load->controller('common/footer');

		$this->response->setOutput($this->load->view('service/advertise_audit_list.tpl', $data));
	}

	private function load_component($advertise_id,$mode='targeting') {
		$mode = strtolower(trim($mode));
		$component = $this->model_service_advertise_audit->getAdvertiseComponentProgress($advertise_id,$mode);
		if(empty($component['status_text'])){
			$component['status_text'] = $this->language->get('text_pending');
			$component['status'] = 0;
			$component['locker'] = 0;
		}
		$this->load->model('user/user');
		$this->load->model('customer/customer');
		if($component['from'] == 'backend' && !empty($component['user_id'])){
			$operator = $this->model_user_user->getUser($component['user_id']);
			$data['operator'] = empty($operator['nickname']) ? '' :$operator['nickname'];
		}else if($component['from'] == 'member'){
			$operator = $this->model_customer_customer->getUserNameCustomerId($component['customer_id']);
			$data['operator'] = empty($operator['nickname']) ? $operator['username'] :$operator['nickname'];
		}else{
			$data['operator'] = '';
		}
		$component['locked'] = $component['locker'] && $component['locker'] != $this->user->getId() ;
		$data['component'] = $component;
		$data['progress_status'] = $this->language->get('progress_status');
		$data['text_transfer'] = $this->language->get('text_transfer');
		$data['text_view'] = $this->language->get('text_view');

		$data['mode'] = $mode;
		$data['advertise_id'] = $advertise_id;
		return $this->load->view('service/component_action.tpl', $data);
	}

	public function getForm() {
		$data['heading_title'] = $this->language->get('heading_title');
		
		$data['text_form'] = !isset($this->request->get['advertise_id']) ? $this->language->get('text_add') : $this->language->get('text_edit');
		$data['text_no_results'] = $this->language->get('text_no_results');
		$data['text_default'] = $this->language->get('text_default');
		$data['text_select'] = $this->language->get('text_select');
		$data['text_none'] = $this->language->get('text_none');
		$data['text_loading'] = $this->language->get('text_loading');
		$data['text_order'] = $this->language->get('text_order');
		$data['text_history'] = $this->language->get('text_history');
		$data['text_confirm_url'] = $this->language->get('text_confirm_url');
		$data['text_confirm_terminate'] = $this->language->get('text_confirm_terminate');

		$data['entry_customer'] = $this->language->get('entry_customer');
		$data['entry_advertise_sn'] = $this->language->get('entry_ad_sn');
		$data['entry_website'] = $this->language->get('entry_website');
		$data['entry_product'] = $this->language->get('entry_product');
		$data['entry_target_url'] = $this->language->get('entry_target_url');
		$data['entry_in_charge'] = $this->language->get('entry_in_charge');
		$data['entry_date_added'] = $this->language->get('entry_date_added');
		$data['entry_note'] = $this->language->get('entry_note');
		$data['entry_publish'] = $this->language->get('entry_publish');
		$data['entry_status'] = $this->language->get('entry_status');
		$data['entry_notify'] = $this->language->get('entry_notify');

		$data['button_save'] = $this->language->get('button_save');
		$data['button_terminate'] = $this->language->get('button_terminate');
		$data['btn_update'] = $this->language->get('btn_update');
		$data['button_cancel'] = $this->language->get('button_cancel');
		$data['button_continue'] = $this->language->get('button_continue');
		$data['button_back'] = $this->language->get('button_back');
		$data['button_remove'] = $this->language->get('button_remove');
		$data['button_history_add'] = $this->language->get('button_history_add');

		$data['tab_general'] = $this->language->get('tab_general');
		$data['tab_history'] = $this->language->get('tab_history');
		$data['tab_tracking'] = $this->language->get('tab_tracking');
		$data['tab_targeting'] = $this->language->get('tab_targeting');
		$data['tab_post'] = $this->language->get('tab_post');
		$data['tab_photo'] = $this->language->get('tab_photo');
		$data['token'] = $this->session->data['token'];

		if (isset($this->error['warning'])) {
			$data['error_warning'] = $this->error['warning'];
		} else {
			$data['error_warning'] = '';
		}

		if (isset($this->session->data['success'])) {
			$data['success'] = $this->session->data['success'];

			unset($this->session->data['success']);
		} else {
			$data['success'] = '';
		}

		$url = '';

		if (isset($this->request->get['filter_ad_sn'])) {
			$url .= '&filter_ad_sn=' . $this->request->get['filter_ad_sn'];
		}
		if (isset($this->request->get['filter_product'])) {
			$url .= '&filter_product=' . $this->request->get['filter_product'];
		}
		if (isset($this->request->get['filter_target_url'])) {
			$url .= '&filter_target_url=' . $this->request->get['filter_target_url'];
		}

		if (isset($this->request->get['filter_post'])) {
			$url .= '&filter_post=' . $this->request->get['filter_post'];
		}
		if (isset($this->request->get['filter_customer_id'])) {
			$url .= '&filter_customer_id=' . (int)$this->request->get['filter_customer_id'];
		}

		if (isset($this->request->get['filter_publish'])) {
			$url .= '&filter_publish=' . $this->request->get['filter_publish'];
		}

		if (isset($this->request->get['filter_in_charge'])) {
			$url .= '&filter_in_charge=' . $this->request->get['filter_in_charge'];
		}

		if (isset($this->request->get['filter_targeting'])) {
			$url .= '&filter_targeting=' . $this->request->get['filter_targeting'];
		}
		if (isset($this->request->get['filter_post'])) {
			$url .= '&filter_post=' . $this->request->get['filter_post'];
		}
		if (isset($this->request->get['filter_photo'])) {
			$url .= '&filter_photo=' . $this->request->get['filter_photo'];
		}

		if (isset($this->request->get['filter_date_added'])) {
			$url .= '&filter_date_added=' . $this->request->get['filter_date_added'];
		}

		if (isset($this->request->get['filter_date_modified'])) {
			$url .= '&filter_date_modified=' . $this->request->get['filter_date_modified'];
		}

		if (isset($this->request->get['sort'])) {
			$url .= '&sort=' . $this->request->get['sort'];
		}

		if (isset($this->request->get['order'])) {
			$url .= '&order=' . $this->request->get['order'];
		}

		if (isset($this->request->get['page'])) {
			$url .= '&page=' . $this->request->get['page'];
		}

		$data['breadcrumbs'] = array();

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('text_home'),
			'href' => $this->url->link('common/dashboard', 'token=' . $this->session->data['token'], 'SSL')
		);

		$data['breadcrumbs'][] = array(
			'text' => $this->language->get('heading_title'),
			'href' => $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url, 'SSL')
		);

		$data['cancel'] = $this->url->link('service/advertise_audit', 'token=' . $this->session->data['token'] . $url, 'SSL');

		if (isset($this->request->get['advertise_id']) && ($this->request->server['REQUEST_METHOD'] != 'POST')) {
			$ad_info = $this->model_service_advertise_audit->getAdvertise($this->request->get['advertise_id']);
		}

		if (!empty($ad_info)) {
			$data['advertise_id'] = $this->request->get['advertise_id'];
			$data['advertise_sn'] = $ad_info['advertise_sn'];
			$data['product'] = $ad_info['product'];
			$data['company'] = $ad_info['company'];
			$data['customer'] = $ad_info['customer'];
			$data['customer_id'] = $ad_info['customer_id'];
			$data['website_status'] = $ad_info['website_status'];
			$data['in_charge'] = $ad_info['in_charge'];
			$data['charger'] = strtolower($ad_info['charger']);
			$data['publish'] = $ad_info['publish'];
			$data['publish_text'] = $ad_info['publish_text'];
			$data['note'] = $ad_info['note'];
			$data['target_url'] = $ad_info['target_url'];
			$data['website'] = $ad_info['website'];
			$data['date_added'] = date('Y-m-d H:i:s',strtotime($ad_info['date_added']));
			$data['is_in_charge'] = ($this->user->getId() == $ad_info['in_charge'] ) && ($ad_info['publish'] < $this->config->get('ad_publish_confirmed'));
			if(!$data['website_status']){
				$data['error_warning'] = $this->language->get('text_website_status');
			}
		} else {
			$data['advertise_id'] = 0;
			$data['advertise_sn'] = '';
			$data['customer'] = '';
			$data['customer_id'] = '';
			$data['product'] = '';
			$data['company'] = '';
			$data['in_charge'] = '';
			$data['charger'] = '';
			$data['publish'] = $this->config->get('config_publish_id');
			$data['note'] = '';
			$data['target_url'] = '';
			$data['website'] = '';
			$data['publish_text'] = $this->language->get('text_unknown');
			$data['date_added'] = date('Y-m-d H:i:s');
		}

		$this->load->model('localisation/advertise_publish');
		$publish = $this->model_localisation_advertise_publish->getAdvertisePublish($data['publish']);
        if($publish){
            $data['publish_text'] = sprintf(getBSTagStyle($publish['publish_id'],'publish'),$publish['name']);
        }else{
            $data['publish_text'] = sprintf(getBSTagStyle(0,'publish'),$this->language->get('text_unknown'));
        }
		
		$data['ad_publishes'] = $this->model_localisation_advertise_publish->getAdvertisePublishes();
		$data['ad_publish_confirmed'] = $this->config->get('ad_publish_confirmed');
		$data['header'] = $this->load->controller('common/header');
		$data['column_left'] = $this->load->controller('common/column_left');
		$data['footer'] = $this->load->controller('common/footer');

		$this->response->setOutput($this->load->view('service/advertise_audit_form.tpl', $data));
	}
	protected function validate($route) {
		if (!$this->user->hasPermission($route)) {
			$this->error['warning'] = $this->language->get('error_permission');
		}

		if(isset($this->request->post['target_url']) && !isURL(htmlspecialchars_decode($this->request->post['target_url']))){
			//$this->error['target_url'] = $this->language->get('error_target_url');
		}

		return !$this->error;
	}

	public function history() {
		$this->load->language('service/advertise_audit');
		$this->load->model('service/advertise_audit');

		if (($this->request->server['REQUEST_METHOD'] == 'POST') && $this->validate('service/advertise_audit/history')) {
			if(isset($this->request->post['ads'])){
				$ads = explode(",", $this->request->post['ads']);
				if(is_array($ads)){
					foreach ($ads as $ad_id) {
						$this->model_service_advertise_audit->addAdvertiseHistory($ad_id,$this->request->post);
					}
				}
			}else{
				$this->model_service_advertise_audit->addAdvertiseHistory($this->request->get['advertise_id'],$this->request->post);	
			}		
			$this->response->addHeader('Content-Type: application/json');
			$this->response->setOutput(json_encode(array('success'=>$this->language->get('text_success'))));
		}else{
			$data['text_no_results'] = $this->language->get('text_no_results');
			$data['column_date_added'] = $this->language->get('column_date_added');
			$data['column_publish'] = $this->language->get('column_publish');
			$data['column_notify'] = $this->language->get('column_notify');
			$data['column_note'] = $this->language->get('column_note');
			$data['column_from'] = $this->language->get('column_from');
			$data['column_operator'] = $this->language->get('column_operator');

			if (isset($this->request->get['page'])) {
				$page = $this->request->get['page'];
			} else {
				$page = 1;
			}

			$data['histories'] = array();

			$this->load->model('service/advertise_audit');

			$results = $this->model_service_advertise_audit->getAdvertiseHistories($this->request->get['advertise_id'], ($page - 1) * 10, 10);

			foreach ($results as $result) {

				$operator = '';
				if($result['customer_id']){
					$operator = $this->language->get('text_customer');
				}else if($result['in_charge']){
					$operator = $this->language->get('text_in_charge');
				}
				$data['histories'][] = array(
					'notify'     => $result['notify'] ? $this->language->get('text_yes') : $this->language->get('text_no'),
					'from'     	 => $result['from'] == 'member' ? $this->language->get('entry_from_member') : $this->language->get('entry_from_backend'),
					'operator'   => $operator,
					'publish'    => $result['publish'] == 1 ? $this->language->get('text_queuing') : $result['publish_text'],
					'note'    	 => nl2br($result['note']),
					'date_added' => date('Y-m-d H:i:s', strtotime($result['date_added']))
				);
			}

			$history_total = $this->model_service_advertise_audit->getTotalAdvertiseHistories($this->request->get['advertise_id']);

			$pagination = new Pagination();
			$pagination->total = $history_total;
			$pagination->page = $page;
			$pagination->limit = 10;
			$pagination->url = $this->url->link('service/advertise_audit/history', 'token=' . $this->session->data['token'] . '&advertise_id=' . $this->request->get['advertise_id'] . '&page={page}', 'SSL');

			$data['pagination'] = $pagination->render();

			$data['results'] = sprintf($this->language->get('text_pagination'), ($history_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($history_total - 10)) ? $history_total : ((($page - 1) * 10) + 10), $history_total, ceil($history_total / 10));

			$this->response->setOutput($this->load->view('service/advertise_audit_history.tpl', $data));
		}
	}

	public function ajax_data(){
		$this->load->model('service/advertise_audit');
		$this->load->language('service/advertise_audit');
		if(isset($this->request->get['action'])){
			$action = strtolower(trim($this->request->get['action']));
		}else if(isset($this->request->post['action'])){
			$action = strtolower(trim($this->request->post['action']));
		}else{
			$action = 'get';
		}
		$json = array();
		switch ($action) {
			case 'transfer':
				$mode = isset($this->request->post['mode']) ? strtolower(trim($this->request->post['mode'])) : 'targeting';
				$entry_id = isset($this->request->post['entry_id']) ? (int)$this->request->post['entry_id'] : false;
				if(isset($this->request->post['specify']) && !$this->request->post['specify']){
					$this->request->post['user_id'] = 0;
				}
				if(!isset($this->request->post['user_id'])){
					$json = array('status'=>0,'msg'=>$this->language->get('text_exception'));
				}
				if(in_array($mode, array('post','photo'))){
					$transfer = true;//$this->model_service_advertise_audit->validateTransferState($entry_id,$mode);
				}else{
					$transfer = true;
				}

				if($transfer === true){
					$result = $this->model_service_advertise_audit->componentTransfer($entry_id,$this->request->post,$mode);
					if($result == -1){
						$json['status'] = 0;
						$json['msg']	= $this->language->get('text_locked');
					}else if($result){
						$json['status'] = 1;
						$json['msg']	= $this->language->get('text_transfer_success');
						$this->session->data['success'] = $this->language->get('text_transfer_success');
						$this->model_service_advertise_audit->lockAdvertiseComponent($entry_id,$mode,true,true);
					}
				}else{
					switch ($mode) {
						case 'post':
							$msg = $this->language->get('text_no_targeting');
							break;						
						case 'photo':
							$msg = $this->language->get('text_no_post');
							break;
					}
					$json = array('status' => 0,'msg'	=> $msg);
				}
				break;
			case 'approve':
				$mode = isset($this->request->post['mode']) ? strtolower(trim($this->request->post['mode'])) : 'targeting';
				$entry_id = isset($this->request->post['entry_id']) ? (int)$this->request->post['entry_id'] : false;
				$result = $this->model_service_advertise_audit->componentApprove($entry_id,$this->request->post,$mode);
				if($result == -1){
					$json['status'] = 0;
					$json['msg']	= $this->language->get('text_locked');
				}else if($result){

					$this->model_service_advertise_audit->autoPublishWaiting($entry_id,$mode);
					$json['status'] = 1;
					$json['msg']	= $this->language->get('text_success');
					$this->session->data['success'] = $this->language->get('text_approve_success');
					$this->model_service_advertise_audit->lockAdvertiseComponent($entry_id,$mode,true,true);
				}
				break;
			case 'bulk':
				$selected = isset($this->request->post['_selected']) ? trim($this->request->post['_selected']) : false;
				$publish = isset($this->request->post['_publish']) ? (int)$this->request->post['_publish'] : false;
				$note = isset($this->request->post['_note']) ? (int)$this->request->post['_note'] : '';
				$ids = explode(",", $selected);
				$n = $e = 0;
				if(is_array($ids)){
					foreach ($ids as $ad_id) {
						if($ad_id){
							$ad_info = $this->model_service_advertise_audit->getAdvertise($ad_id,true);

							$permission_group = !empty($ad_info['in_charge']) ? array_merge($this->config->get('ad_group_manager'),array($ad_info['in_charge'])) : $this->config->get('ad_group_manager');
							if(in_array($this->user->getId(),$permission_group) ){
								if($this->model_service_advertise_audit->addAdvertiseHistory($ad_id,array('publish'=>$publish,'note'=>$note))){
								$n++;
								}else{
									$e++;
								}
							}else{
								$e++;
							}
							
						}
					}
				}
				
				if($n){
					$json['status'] = 1;
					$json['msg']	= $this->language->get('text_bulk_success');
					$this->session->data['success'] = sprintf($this->language->get('text_bulk_success'),$n,$e);
				}else{
					$json['status'] = 0;
					$json['msg']	= $this->language->get('text_bulk_exception');
				}
				break;
			case 'reset':
				$mode = isset($this->request->post['mode']) ? strtolower(trim($this->request->post['mode'])) : 'targeting';
				$entry_id = isset($this->request->post['entry_id']) ? (int)$this->request->post['entry_id'] : false;
				$result = $this->model_service_advertise_audit->componentReset($entry_id,$this->request->post,$mode);
				if($result == -1){
					$json['status'] = 0;
					$json['msg']	= $this->language->get('text_locked');
				}else if($result){
					$json['status'] = 1;
					$json['msg']	= $this->language->get('text_reset_success');
					$this->session->data['success'] = $this->language->get('text_reset_success');
					$this->model_service_advertise_audit->lockAdvertiseComponent($entry_id,$mode,true,true);
				}
				break;
			case 'unlock':
				$mode = isset($this->request->post['mode']) ? strtolower(trim($this->request->post['mode'])) : 'targeting';
				$entry_id = isset($this->request->post['entry_id']) ? (int)$this->request->post['entry_id'] : false;
				$valide = isset($this->request->post['valide']) ? (int)$this->request->post['valide'] : false;
				$unlock = isset($this->request->post['unlock']) ? (int)$this->request->post['unlock'] : false;

				$result = $this->model_service_advertise_audit->lockAdvertiseComponent($entry_id,$mode,$valide,$unlock);
				if($result){
					$json['status'] = 1;
					$json['msg']	= $this->language->get('text_lock_success');
					if(!$valide) $this->session->data['success'] = $this->language->get('text_lock_success');
				}
				break;
			case 'targeturl':
				$advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
				$target_url = isset($this->request->post['target_url']) ? htmlspecialchars_decode($this->request->post['target_url']) : false;
				if($advertise_id && $target_url){
					if(!isURL($target_url)){
						$json['status'] = 0;
						$json['msg']	= $this->language->get('error_target_url');
					}else{
						$result = $this->model_service_advertise_audit->editTargetURL($advertise_id,$target_url);
						if($result){
							$json['status'] = 1;
							$json['msg']	= $this->language->get('text_success');
							$this->session->data['success'] = $this->language->get('text_success');
						}
					}
				}else{
					$json['status'] = 0;
					$json['msg']	= $this->language->get('text_exception');
				}
				break;
			case 'terminate':
				
		    	$advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
		    	if($advertise_id){
		    		$result=$this->model_service_advertise_audit->toTermination($advertise_id);
		    		if ($result==-1){
		    			$json['status'] = 0;
					    $json['msg']	= $this->language->get('error_permission');
		    		}else{
		    			$json['status'] = 1;
					    $json['msg']	= $this->language->get('text_update_success');
		    		}
		    		
		    	}else{
		    		$json['status'] = 0;
					$json['msg']	= $this->language->get('text_update_failed');
		    	}
		}
		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}

	public function component(){
		$this->load->model('service/advertise_audit');
		$this->load->language('service/advertise_audit');
		
		$mode = isset($this->request->post['mode']) ? strtolower(trim($this->request->post['mode'])) : 'targeting';
		$advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
		$overview = isset($this->request->post['overview']) ? (int)$this->request->post['overview'] : false;
		if(!$advertise_id){
			$this->response->setOutput($this->load->view('service/component_error.tpl'));
			exit;
		}
		$ad_info = $this->model_service_advertise_audit->getAdvertise($advertise_id,true);
		if(!$ad_info){
			$this->response->setOutput($this->load->view('service/component_error.tpl'));
			exit;
		}
		
		$data = $this->model_service_advertise_audit->getAdvertiseComponentProgress($advertise_id,$mode,true);
		
		$data['mode_action'] = htmlspecialchars_decode($this->url->link('service/advertise_audit/ajax_data','token='.$this->session->data['token'],'SSL'));
		$data['mode'] = $mode;
		$data['target_url'] = htmlspecialchars_decode($ad_info['target_url']);
		$data['transfer'] = false;
		$data['heading_title'] = sprintf($this->language->get('title_detail'),ucfirst($mode));
		$data['text_view'] = $this->language->get('text_unsubmit');
		$data['publish'] = $ad_info['publish'];
		$data['modify'] = ($this->user->getId() == $data['in_charge']) ;
		if($data['modify'] && $data['from'] == 'backend' && !$data['user_id']){
			$data['transfer'] = true;
			$data['advertise_id'] = $advertise_id;
			$data['text_view'] = $this->language->get('text_untransfer');
			$data['heading_title'] = sprintf($this->language->get('title_transfer'),ucfirst($mode));
		}
		if($data['status'] >= $this->config->get('ad_'.$mode.'_review') && in_array($this->user->getId(), $this->config->get('ad_group_manager'))){
			$data['modify'] = true;
		}

		/*
			*locked 	file lock status
			*unblocked  relax permission
		*/
		$data['locked'] = $data['unblocked'] = false;
		if(!empty($data['locker'])){
			if($data['locker'] == $this->user->getId()){
				$data['locked'] = false;
			}else{
				$data['locked'] = true;
				$data['text_lock'] = sprintf($this->language->get('text_lock'),$data['keyer']);
				if(($this->user->getId() == $data['in_charge']) || in_array($this->user->getId(),$this->config->get('ad_group_manager'))){
					$data['unblocked'] = true;
				}
			}			
		}else if(($this->user->getId() == $data['in_charge']) || in_array($this->user->getId(),$this->config->get('ad_group_manager'))){
			$this->model_service_advertise_audit->lockAdvertiseComponent(isset($data[$mode.'_id']) ? (int)$data[$mode.'_id'] : 0,$mode);	
		}	
		if(!$data['website_status']){
			$data['locked'] = true;
			$data['modify'] = $data['unblocked'] = $data['transfer'] = false;
			$data['text_lock'] = $this->language->get('text_website_status');
		}

		switch ($mode) {
			case 'targeting':
				$location = $language = array();
				if(isset($data['location'])){
					$location = explode(",", $data['location']);
				}
				if(isset($data['language'])){
					$language = explode(",", $data['language']);
				}
				$data['location'] = is_array($location) ? $location : array();
				$data['language'] = is_array($language) ? $language : array();
				$data['entry_target_url'] = $this->language->get('entry_target_url');
				$data['entry_location'] = $this->language->get('entry_location');
				$data['entry_language'] = $this->language->get('entry_language');
				$data['entry_other_location'] = $this->language->get('entry_other_location');
				$data['entry_other_language'] = $this->language->get('entry_other_language');
				$data['entry_interest'] = $this->language->get('entry_interest');
				$data['entry_behavior'] = $this->language->get('entry_behavior');
				$data['entry_more'] = $this->language->get('entry_more');
				$data['entry_gender'] = $this->language->get('entry_gender');
				$data['entry_age'] = $this->language->get('entry_age');
				$data['entry_age_max'] = $this->language->get('entry_age_max');
				$data['entry_age_min'] = $this->language->get('entry_age_min');
				$data['entry_operator'] = $this->language->get('entry_operator');
				
				$this->load->model('localisation/targeting');
				$data['locations'] = $this->model_localisation_targeting->getTargetingsByCategory('location');
				$data['genders'] = $this->model_localisation_targeting->getTargetingsByCategory('gender');
				$data['languages'] = $this->model_localisation_targeting->getTargetingsByCategory('language');
				$this->load->model('localisation/advertise_targeting');
				$data['targeting_statuses'] = $this->model_localisation_advertise_targeting->getAdvertiseTargetings();
				$data['reset'] = !in_array($data['status'], $this->config->get('ad_targeting_levels'));
				$data['text_confirm_relax_targeting'] = $this->language->get('text_confirm_relax_targeting');
				$data['text_confirm_reset_operator'] = $this->language->get('text_confirm_reset_operator');
				break;
			case 'post':
				$data['entry_headline'] = $this->language->get('entry_headline');
				$data['entry_post_text'] = $this->language->get('entry_post_text');
				$data['entry_author'] = $this->language->get('entry_author');
				$data['entry_artist'] = $this->language->get('entry_artist');
				$this->load->model('localisation/advertise_post');
				$data['post_statuses'] = $this->model_localisation_advertise_post->getAdvertisePosts();
		        $data['reset'] = !in_array($data['status'], $this->config->get('ad_post_levels'));
		        $photo_mode =  $this->model_service_advertise_audit->getAdvertiseComponentProgress($advertise_id,'photo',true);
		        $data['artist_text'] = $data['artist_id'] = '';
		        if($photo_mode['from'] == 'backend'){
		        	$data['artist_id'] = $photo_mode['user_id'];
		        }else{
		        	$data['artist_text'] = 'From Member';
		        }
		        $data['text_confirm_reset_author'] = $this->language->get('text_confirm_reset_author');
		        $data['text_confirm_relax_post'] = $this->language->get('text_confirm_relax_post');
				break;
			case 'photo':
				if(!empty($data['file'])){
					$files = json_decode($data['file'],true);
					if(is_array($files)){
						$file = array();
						$this->load->model('tool/image');
						foreach ($files as $item) {
							$file[] = array(
								'realpath' => HTTP_CATALOG.substr($item['path'],strpos($item['path'],'/')+1),
								'name' => $item['name'],
								'path' => $item['path'],
								'image'	=> $this->model_tool_image->resize($item['path'], 470, 245,true),
							    'download'=>$this->url->download(array('token'=>$this->session->data['token'],'path'=>$item['path'])),
							);
						}
						$data['file'] = $file;
					}
				}
				$data['entry_post_img'] = $this->language->get('entry_post_img');
				$data['entry_artist'] = $this->language->get('entry_artist');
				$this->load->model('localisation/advertise_photo');
				$data['photo_statuses'] = $this->model_localisation_advertise_photo->getAdvertisePhotos();
		        $data['reset'] = !in_array($data['status'], $this->config->get('ad_photo_levels'));
		        $data['text_confirm_relax_photo'] = $this->language->get('text_confirm_relax_photo');
		        $data['text_confirm_reset_artist'] = $this->language->get('text_confirm_reset_artist');
				break;
		}
		
		$data['token'] = $this->session->data['token'];
		$data['entry_last_modified'] = $this->language->get('entry_last_modified');
		$data['entry_id'] = isset($data[$mode.'_id']) ? (int)$data[$mode.'_id'] : 0;
		$data['overview'] = $overview;
		$data['entry_user'] = $this->language->get('entry_user');
		$data['entry_specify'] = $this->language->get('entry_specify');
		$data['text_yes'] = $this->language->get('text_yes');
		$data['text_free_choice'] = $this->language->get('text_free_choice');
		$data['entry_product'] = $this->language->get('entry_product');
		$data['entry_note'] = $this->language->get('entry_note');
		$data['entry_status'] = $this->language->get('entry_status');
		$data['entry_view'] = $this->language->get('entry_view');
		$data['text_copy'] = $this->language->get('text_copy');
		$data['text_confirm'] = $this->language->get('text_confirm');
		$data['text_confirm_reset'] = $this->language->get('text_confirm_reset');
		$data['text_confirm_approve'] = $this->language->get('text_confirm_approve');
		$data['text_confirm_transfer'] = $this->language->get('text_confirm_transfer');

		$data['button_save'] = $this->language->get('button_save');
		$data['button_close'] = $this->language->get('button_close');
		$data['button_transfer'] = $this->language->get('button_transfer');
		$data['button_reset'] = $this->language->get('button_reset');
		$data['button_unlock'] = $this->language->get('button_unlock');

		$this->load->model('user/user');
		$data['contributors'] = $this->model_user_user->getUsersByGroupKey('contributor');
		$data['artists'] = $this->model_user_user->getUsersByGroupKey('artist');
		$data['users'] = $this->model_user_user->getUsers();
		$this->response->setOutput($this->load->view('service/component_'.$mode.'.tpl', $data));
	}

	function tracking(){

		$this->load->language('service/advertise_audit');
		$this->load->model('service/advertise_audit');
		$this->load->model('tool/image');
		$advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
		if (($this->request->server['REQUEST_METHOD'] == 'POST') && isset($this->request->post['text'])){
			$this->model_service_advertise_audit->readMessage($advertise_id);
			$this->model_service_advertise_audit->addAdvertiseTracking($advertise_id,$this->request->post);
		}
		$data['advertise_id'] = $advertise_id;

		$data['button_send'] = $this->language->get('button_send');
		$data['token'] = $this->session->data['token'];
		$data['button_delete'] = $this->language->get('button_delete');
		$data['button_download'] = $this->language->get('button_download');
		$data['error_content'] = $this->language->get('error_content');
		$trackings = $this->model_service_advertise_audit->getAdvertiseTrackings($advertise_id);
		if(is_array($trackings)){
			foreach ($trackings as $key => $item) {
				$trackings[$key]['date'] = date('Y-m-d',strtotime($item['date_added']));
				$trackings[$key]['time'] = date('H:i:s',strtotime($item['date_added']));
				$file = array();
				if(!empty($item['attach'])){
					$attaches = json_decode($item['attach'],true);
					if(is_array($attaches)){
						foreach ($attaches as $attach) {
							if(!isset($attach['path']) || !file_exists($attach['path'])){
								continue;
							}
							$_path = substr($attach['path'],strpos($attach['path'],'/')+1);
							$file[] = array(
								'realpath' => HTTP_CATALOG.$_path,
								'name' => $attach['name'],
								'path' => $_path,
								'image'	=> $this->model_tool_image->resize($attach['path'], 100, 100,true),
								'download' => $this->url->download(array('token'=>$this->session->data['token'],'path'=>$_path,'name'=>$attach['name']))
							);
						}
					}
					
				}
				$trackings[$key]['attach'] = $file;
			}
		}
		$data['trackings'] = $trackings;

		$this->response->setOutput($this->load->view('service/advertise_audit_tracking.tpl', $data));
	}

    public function balance() {
        $this->load->language('service/advertise_audit');
        $this->load->model('service/advertise_audit');

        $data['text_no_results'] = $this->language->get('text_no_results');
        $data['column_date_added'] = $this->language->get('column_date_added');
        $data['column_type'] = $this->language->get('column_type');
        $data['column_priority'] = $this->language->get('column_priority');
        $data['column_note'] = $this->language->get('column_note');
        $data['column_amount'] = $this->language->get('column_amount');
        $data['column_operator'] = $this->language->get('column_operator');

        if (isset($this->request->get['page'])) {
            $page = $this->request->get['page'];
        } else {
            $page = 1;
        }

        $data['balances'] = array();

        $this->load->model('service/advertise_audit');

        $results = $this->model_service_advertise_audit->getAdvertiseBalances($this->request->get['advertise_id'], ($page - 1) * 10, 10);

        foreach ($results as $result) {

            $data['balances'][] = array(
                'type'      => GetLevelTypeName($result['type'],$this->config->get('config_language')),
                'amount'     => $this->currency->format($result['amount']),
                'priority_id'=> $result['priority_id'],
                'priority'   => $result['priority'],
                'note'       => nl2br($result['note']),
                'date_added' => date('Y-m-d', strtotime($result['date_added'])).'<br>'.date('H:i:s', strtotime($result['date_added']))
            );
        }

        $history_total = $this->model_service_advertise_audit->getTotalAdvertiseBalances($this->request->get['advertise_id']);

        $pagination = new Pagination();
        $pagination->total = $history_total;
        $pagination->page = $page;
        $pagination->limit = 10;
        $pagination->url = $this->url->link('service/advertise_audit/balance', '&advertise_id=' . $this->request->get['advertise_id'] . '&page={page}', 'SSL');

        $data['pagination'] = $pagination->render();

        $data['results'] = sprintf($this->language->get('text_pagination'), ($history_total) ? (($page - 1) * 10) + 1 : 0, ((($page - 1) * 10) > ($history_total - 10)) ? $history_total : ((($page - 1) * 10) + 10), $history_total, ceil($history_total / 10));

        $this->response->setOutput($this->load->view('service/advertise_audit_balance.tpl', $data));
    
    }
    public function get_preview(){
    	$this->load->language('service/advertise_audit');
		$this->load->model('service/advertise_audit');
		$this->load->model('tool/image');
    	$advertise_id = isset($this->request->get['advertise_id']) ? (int)$this->request->get['advertise_id'] : false;
    	$result=$this->model_service_advertise_audit->getAdvertisePreview($advertise_id);
        $file = array();
            $file['advertise_id'] =$advertise_id;
            $file['facebook_ad'] =$this->language->get('facebook_ad_preview');
            $file['headline'] =$result['headline'];
            $file['text'] =$result['text'];
			$file['image'] = $this->model_tool_image->resize('no_image.png');
			$file['name'] = 'no_image.png';
			if(!empty($result['file'])){
				$files = json_decode($result['file'],true);
				if(is_array($files)){
					$attch = current($files);
					if ($attch['path'] && file_exists($attch['path'])) {
		                $file['realpath'] = HTTP_CATALOG.substr($attch['path'],strpos($attch['path'],'/')+1);
		                $file['name'] = $attch['name'];
		                $file['image'] = $this->model_tool_image->resize($attch['path'], 470, 245,true);
		                die(json_encode(array('status'=>1,'data'=>$file)));
		            }
				}
				
			}
		die(json_encode(array('status'=>0,'msg'=>$this->language->get('text_no_result'))));
    }
    public function termination(){
    	$this->load->model('service/advertise_audit');
    	$this->load->language('service/advertise_audit');
    	$advertise_id = isset($this->request->post['advertise_id']) ? (int)$this->request->post['advertise_id'] : false;
    	if($advertise_id){
    		$this->model_service_advertise_audit->toTermination($advertise_id);
    		die(json_encode(array('status'=>1,'msg'=>$this->language->get('text_update_success'))));
    	}else{
    		die(json_encode(array('status'=>0,'msg'=>$this->language->get('text_update_failed'))));
    	}
    }
}