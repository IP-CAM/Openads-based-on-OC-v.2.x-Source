<?php
class ModelServiceAdvertiseTransfer extends Model {

	public function getAdvertise($advertise_id,$simple=false) {
		if($simple){
			$sql = "SELECT a.*,pd.name product FROM ".DB_PREFIX."advertise a LEFT JOIN ".DB_PREFIX."product_description pd ON pd.product_id = a.product_id WHERE advertise_id = '".$advertise_id."' AND pd.language_id = '".$this->config->get('config_language_id')."'";
		}else{
			$sql = "SELECT a.*,w.domain website,w.status website_status, pd.name product,c.nickname AS customer,c.company,u.nickname AS charger, ap.name publish_text FROM `" . DB_PREFIX . "advertise` a 
			LEFT JOIN ".DB_PREFIX."website w ON w.website_id = a.website_id LEFT JOIN ".DB_PREFIX."product_description pd ON pd.product_id = a.product_id LEFT JOIN ".DB_PREFIX."customer c ON c.customer_id = a.customer_id 
			LEFT JOIN ".DB_PREFIX."user u ON u.user_id = a.in_charge LEFT JOIN `".DB_PREFIX."advertise_publish` ap ON ap.publish_id = a.publish WHERE a.advertise_id = '" . (int)$advertise_id . "' AND pd.language_id = '".$this->config->get('config_language_id')."'";
		}
		$query = $this->db->query($sql);

		if ($query->num_rows) {
			return $query->row;
		} 
		return false;
	}

	public function getAdComponent($advertise_id,$mode = 'targeting'){
		switch (strtolower($mode)) {
			case 'post':
				$table = 'advertise_post';
				$status_table = 'advertise_post_status';
				break;
			case 'photo':
				$table = 'advertise_photo';
				$status_table = 'advertise_photo_status';
				break;
			default :
				$table = 'advertise_targeting';
				$status_table = 'advertise_targeting_status';
				break;
		}
		$sql = "SELECT am.*,w.domain,w.status website_status,ams.name status_text FROM ".DB_PREFIX.$table." am LEFT JOIN ".DB_PREFIX."website w ON w.website_id = am.website_id
		LEFT JOIN ".DB_PREFIX.$status_table." ams ON ( ams.status_id = am.status AND ams.language_id = '".$this->config->get('config_language_id')."' )
		WHERE am.advertise_id = '".(int)$advertise_id."'";

		$query = $this->db->query($sql);

		return $query->num_rows ? $query->row : false;
	}

	public function lockAdComponent($entry_id,$mode='targeting',$valid=false,$reset=false){
		switch (strtolower($mode)) {
			case 'targeting':
				$table = 'advertise_targeting';
				$primary_key = 'targeting_id';
				break;
			case 'post':
				$table = 'advertise_post';
				$primary_key = 'post_id';
				break;
			case 'photo':
				$table = 'advertise_photo';
				$primary_key = 'photo_id';
				break;
			default:
				$table = 'advertise';
				$primary_key = 'advertise_id';
		}
		if($table && $primary_key){
			$data = array('locker'=>$this->user->getId());
			if($reset){
				$data = array('locker'=>0);
			}
			if($valid){
				$component = $this->db->fetch($table,array('one'=>true,'condition'=>array($primary_key=>$entry_id,'locker'=>$this->user->getId())));
				if(!$component){
					 return false;
				}
			}
			$this->db->update($table,array($primary_key=>$entry_id),$data);
			return true;
		}
		return false;
	}

	public function getAdvertises($data = array()) {
		$sql = "SELECT a.*,w.domain,w.status website_status	FROM `" . DB_PREFIX . "advertise` a LEFT JOIN ".DB_PREFIX."website w ON w.website_id = a.website_id
		 WHERE a.`publish` = '".$this->config->get('ad_publish_designing')."' AND w.status = '1'";
		if(!$this->user->isSupervisor()){
			$sql .= " AND a.in_charge = '" . $this->user->getId() . "'";
		}
        if (!empty($data['filter_ad_sn'])) {
			$sql .= " AND a.advertise_sn LIKE '" . $data['filter_ad_sn'] . "%'";
		}
		if (!empty($data['filter_product'])) {
			$sql .= " AND a.product_id = '" . (int)$data['filter_product'] . "'";
		}
		if (!empty($data['filter_target_url'])) {
			$sql .= " AND a.target_url LIKE '%" . $this->db->escape($data['filter_target_url']) . "%'";
		}
		if (!empty($data['filter_publish'])) {
			$sql .= " AND a.publish = '" . $this->db->escape($data['filter_publish']) . "'";
		}
		if (!empty($data['filter_in_charge'])) {
			$sql .= " AND a.in_charge = '" . (int)$data['filter_in_charge'] . "'";
		}
		if (!empty($data['filter_targeting'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_targeting WHERE status = '".(int)$data['filter_targeting']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return array();
				}
			}else{
				return array();
			}
		}
		if (!empty($data['filter_post'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_post WHERE status = '".(int)$data['filter_post']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return array();
				}
			}else{
				return array();
			}
		}
		if (!empty($data['filter_photo'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_photo WHERE status = '".(int)$data['filter_photo']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return array();
				}
			}else{
				return array();
			}
		}
		if (!empty($data['filter_customer'])) {
			$sql .= " AND c.nickname LIKE '%" . $this->db->escape($data['filter_customer']) . "%'";
		}
		if (!empty($data['filter_customer_id'])) {
			$sql .= " AND a.customer_id = '" . (int)$data['filter_customer_id'] . "'";
		}		
		if (!empty($data['filter_date_added'])) {
			$sql .= " AND DATE(a.date_added) = DATE('" . $this->db->escape($data['filter_date_added']) . "')";
		}
		if (!empty($data['filter_date_modified'])) {
			$sql .= " AND DATE(a.date_modified) = DATE('" . $this->db->escape($data['filter_date_modified']) . "')";
		}
		if (!empty($data['filter_modified_start'])) {
            $sql .= " AND DATE(a.date_modified) >= DATE('" . $this->db->escape($data['filter_modified_start']) . "')";
        }

        if (!empty($data['filter_modified_end'])) {
            $sql .= " AND DATE(a.date_modified) <= DATE('" . $this->db->escape($data['filter_modified_end']) . "')";
        }

        if(isset($data['filter_message'])){
        	$query = $this->db->query("SELECT advertise_id FROM ".DB_PREFIX."advertise_tracking WHERE `read` = '0' AND `from` = 'member' ");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return array();
				}
			}else{
				return array();
			}
        }

		$sort_data = array(
			'a.advertise_sn',
			'a.target_url',
			'a.in_charge',
			'a.publish',
			'a.customer_id',
			'a.date_added',
			'a.date_modified',
		);

		if (isset($data['sort']) && in_array($data['sort'], $sort_data)) {
			$sql .= " ORDER BY " . $data['sort'];
		} else {
			$sql .= " ORDER BY a.date_modified";
		}

		if (isset($data['order']) && ($data['order'] == 'ASC')) {
			$sql .= " ASC";
		} else {
			$sql .= " DESC";
		}

		if (isset($data['start']) || isset($data['limit'])) {
			if ($data['start'] < 0) {
				$data['start'] = 0;
			}

			if ($data['limit'] < 1) {
				$data['limit'] = 20;
			}

			$sql .= " LIMIT " . (int)$data['start'] . "," . (int)$data['limit'];
		}

		$query = $this->db->query($sql);

		return $query->rows;
	}

	public function getTotalAdvertises($data = array()) {
		$sql = "SELECT COUNT(a.advertise_id) AS total FROM `" . DB_PREFIX . "advertise` a LEFT JOIN ".DB_PREFIX."website w ON w.website_id = a.website_id
		WHERE a.`publish` = '".$this->config->get('ad_publish_designing')."' AND w.status = '1'";
		if(!$this->user->isSupervisor()){
			$sql .= " AND a.in_charge = '" . $this->user->getId() . "'";
		}
		if (!empty($data['filter_ad_sn'])) {
			$sql .= " AND a.advertise_sn LIKE '" . $data['filter_ad_sn'] . "%'";
		}
		if (!empty($data['filter_product'])) {
			$sql .= " AND a.product_id = '" . (int)$data['filter_product'] . "'";
		}
		if (!empty($data['filter_target_url'])) {
			$sql .= " AND a.target_url LIKE '%" . $this->db->escape($data['filter_target_url']) . "%'";
		}
		if (!empty($data['filter_publish'])) {
			$sql .= " AND a.publish = '" . $this->db->escape($data['filter_publish']) . "'";
		}
		if (!empty($data['filter_in_charge'])) {
			$sql .= " AND a.in_charge = '" . (int)$data['filter_in_charge'] . "'";
		}
		if (!empty($data['filter_targeting'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_targeting WHERE status = '".(int)$data['filter_targeting']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return 0;
				}
			}else{
				return 0;
			}
		}
		if (!empty($data['filter_post'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_post WHERE status = '".(int)$data['filter_post']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return 0;
				}
			}else{
				return 0;
			}
		}
		if (!empty($data['filter_photo'])) {
			$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_photo WHERE status = '".(int)$data['filter_photo']."'");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return 0;
				}
			}else{
				return 0;
			}
		}
		if (!empty($data['filter_customer'])) {
			$sql .= " AND c.nickname LIKE '%" . $this->db->escape($data['filter_customer']) . "%'";
		}
		if (!empty($data['filter_customer_id'])) {
			$sql .= " AND a.customer_id = '" . (int)$data['filter_customer_id'] . "'";
		}		
		if (!empty($data['filter_date_added'])) {
			$sql .= " AND DATE(a.date_added) = DATE('" . $this->db->escape($data['filter_date_added']) . "')";
		}
		if (!empty($data['filter_date_modified'])) {
			$sql .= " AND DATE(a.date_modified) = DATE('" . $this->db->escape($data['filter_date_modified']) . "')";
		}
		if (!empty($data['filter_modified_start'])) {
            $sql .= " AND DATE(a.date_modified) >= DATE('" . $this->db->escape($data['filter_modified_start']) . "')";
        }

        if (!empty($data['filter_modified_end'])) {
            $sql .= " AND DATE(a.date_modified) <= DATE('" . $this->db->escape($data['filter_modified_end']) . "')";
        }

        if(isset($data['filter_message'])){
        	$query = $this->db->query("SELECT DISTINCT advertise_id FROM ".DB_PREFIX."advertise_tracking WHERE `read` = '0' AND `from` = 'member' ");
			$ids = array();
			if($query->num_rows){
				foreach ($query->rows as $item) {
					if($item['advertise_id'])
						$ids[] = $item['advertise_id'];
				}
				if(count($ids)){
					$sql .= " AND a.advertise_id IN (".implode(",", $ids).")";
				}else{
					return 0;
				}
			}else{
				return 0;
			}
        }

		$query = $this->db->query($sql);

		return $query->row['total'];
	}


	public function addAdvertiseHistory($advertise_id,$data){
		$fields = array(
			'publish'		=> $data['publish'],
			'note'			=> isset($data['note']) ? strip_tags($data['note']) :'',
			'date_modified'	=> date('Y-m-d H:i:s')
		);
		$this->db->update('advertise',array('advertise_id'=>$advertise_id),$fields);
		$history = array(
			'advertise_id' 	=> $advertise_id,
			'publish'		=> $data['publish'],
			'from'			=> isset($data['from']) ? $data['from'] : 'backend',
			'customer_id'	=> 0,
			'note'			=> isset($data['note']) ? strip_tags($data['note']) :'',
			'in_charge'		=> $this->user->getId(),
			'notify'		=> isset($data['notify']) ? $data['notify'] : 1,
			'date_added'	=> date('Y-m-d H:i:s')
		);
		return $this->db->insert('advertise_history',$history);
	}
	public function getAdvertiseHistories($advertise_id, $start = 0, $limit = 10) {
		if ($start < 0) {
			$start = 0;
		}

		if ($limit < 1) {
			$limit = 10;
		}

		$query = $this->db->query("SELECT ah.*, ap.name AS publish_text FROM " . DB_PREFIX . "advertise_history ah LEFT JOIN " . DB_PREFIX . "advertise_publish ap ON (ah.publish = ap.publish_id AND ap.language_id = '" . (int)$this->config->get('config_language_id') . "') WHERE ah.advertise_id = '" . (int)$advertise_id . "' ORDER BY ah.date_added DESC LIMIT " . (int)$start . "," . (int)$limit);

		return $query->rows;
	}

	public function getTotalAdvertiseHistories($advertise_id) {
		$query = $this->db->query("SELECT COUNT(history_id) AS total FROM " . DB_PREFIX . "advertise_history WHERE advertise_id = '" . (int)$advertise_id . "'");

		return $query->row['total'];
	}

	public function componentTransfer($entry_id,$data,$mode='targeting'){
		
		switch (strtolower(trim($mode))) {
			case 'targeting':
				$targeting = $this->db->fetch('advertise_targeting',array('one'=>true,'condition'=>array('targeting_id'=>$entry_id)));
				if(!empty($targeting['locker']) && $targeting['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($targeting['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_targeting_transferred'),
						'note'			=> trim($data['note']),
						'user_id'		=> $data['operator'],
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update("advertise_targeting",array('targeting_id'=>$entry_id), $fields);
					$history = array(
						'advertise_id'  => $targeting['advertise_id'],
						'targeting_id'  => $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_targeting_transferred'),
						'note'			=> isset($data['note']) ? strip_tags($data['note']) : 'Transfer to the operator',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s')
					);
					return $this->db->insert('advertise_targeting_history',$history);
				}
				break;
			case 'post':
				$post = $this->db->fetch('advertise_post',array('one'=>true,'condition'=>array('post_id'=>$entry_id)));
				if(!empty($post['locker']) && $post['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($post['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_post_transferred'),
						'note'			=> isset($data['note']) ? strip_tags($data['note']) : '',
						'user_id'		=> $data['operator'],
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update("advertise_post",array('post_id'=>$entry_id),$fields);
					$history = array(
						'advertise_id' 	=> $post['advertise_id'],
						'post_id'		=> $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_post_transferred'),
						'note'			=> isset($data['note']) ? strip_tags($data['note']) : 'Transfer to the author',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s'),
					);
					$history_id = $this->db->insert("advertise_post_history", $history);
					if(isset($data['artist_id'])){
						$tmp = array(
							'user_id' => $data['artist_id'],
							'note' => isset($data['artist_note']) ? strip_tags($data['artist_note']) : ''
						);
						$this->componentTransfer($entry_id,$tmp,'photo');
					}
					return $history_id ;
				}
				break;
			case 'photo':
				$photo = $this->db->fetch('advertise_photo',array('one'=>true,'condition'=>array('photo_id'=>$entry_id)));
				if(!empty($photo['locker']) && $photo['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($photo['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_photo_transferred'),
						'note'			=> isset($data['note']) ? strip_tags($data['note']) : '',
						'user_id'		=> $data['operator'],
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update('advertise_photo',array('photo_id'=>$entry_id),$fields);
					$history = array(
						'advertise_id' 	=> $photo['advertise_id'],
						'photo_id'		=> $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_photo_transferred'),
						'note'			=> isset($data['note']) ? strip_tags($data['note']) : 'Transfer to the artist',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s'),
					);
					return $this->db->insert("advertise_photo_history",$history);
				}
				break;
		}
		return false;
	}

	public function componentReset($entry_id,$data,$mode='targeting'){
		
		switch (strtolower(trim($mode))) {
			case 'targeting':
				$targeting = $this->db->fetch('advertise_targeting',array('one'=>true,'condition'=>array('targeting_id'=>$entry_id)));
				if(!empty($targeting['locker']) && $targeting['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($targeting['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_targeting_pending'),
						'user_id'		=> 0,
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update("advertise_targeting",array('targeting_id'=>$entry_id), $fields);
					$history = array(
						'advertise_id'  => $targeting['advertise_id'],
						'targeting_id'  => $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_targeting_pending'),
						'note'			=> 'Reset operator',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s')
					);
					return $this->db->insert('advertise_targeting_history',$history);
				}
				break;
			case 'post':
				$post = $this->db->fetch('advertise_post',array('one'=>true,'condition'=>array('post_id'=>$entry_id)));
				if(!empty($post['locker']) && $post['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($post['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_post_pending'),
						'user_id'		=> 0,
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update("advertise_post",array('post_id'=>$entry_id),$fields);
					$history = array(
						'advertise_id' 	=> $post['advertise_id'],
						'post_id'		=> $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_post_pending'),
						'note'			=> 'Reset author',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s'),
					);
					return $this->db->insert("advertise_post_history", $history);
				}
				break;
			case 'photo':
				$photo = $this->db->fetch('advertise_photo',array('one'=>true,'condition'=>array('photo_id'=>$entry_id)));
				if(!empty($photo['locker']) && $photo['locker']!=$this->user->getId()){
					return -1;
				}
				if(!empty($photo['advertise_id'])){
					$fields = array(
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_photo_pending'),
						'user_id'		=> 0,
						'date_modified'	=> date('Y-m-d H:i:s')
					);
					$this->db->update('advertise_photo',array('photo_id'=>$entry_id),$fields);
					$history = array(
						'advertise_id' 	=> $photo['advertise_id'],
						'photo_id'		=> $entry_id,
						'from'			=> 'backend',
						'status'		=> $this->config->get('ad_photo_pending'),
						'note'			=> 'Reset artist',
						'in_charge'		=> $this->user->getId(),
						'date_added'	=> date('Y-m-d H:i:s'),
					);
					return $this->db->insert("advertise_photo_history",$history);
				}
				break;
		}
		return false;
	}
	public function validateTransferState($entry_id,$mode){
		$table = 'advertise_'.strtolower(trim($mode));
		$pk = strtolower(trim($mode)).'_id';
		$data = array(
			'one' 		=> true,
			'alias'		=> 'am',			
			'join'		=> array(
				array(
					'table' => 'advertise',
					'alias' => 'a',
					'on'    => 'a.advertise_id = am.advertise_id'
				)
			),
			'condition' => array(
				$pk => $entry_id
			)
		);
		switch (strtolower(trim($mode))) {
			case 'post':
				$data['field'] 	= array('at.status');
				$data['join'][] = array(
					'table' => 'advertise_targeting',
					'alias' => 'at',
					'on'    => 'a.targeting_id = at.targeting_id'
				);
				$levels = $this->config->get('ad_targeting_levels');
				break;
			case 'photo':
				$data['field'] 	= array('ap.status');
				$data['join'][] = array(
					'table' => 'advertise_post',
					'alias' => 'ap',
					'on'    => 'a.post_id = ap.post_id'
				); 
				$levels = $this->config->get('ad_post_levels');
				break;
		}
		
		$result = $this->db->fetch($table,$data);
		if(isset($result['status']) && in_array($result['status'], $levels)){
			return true;
		}
		return false;
	}

	public function autoPublishWaiting($entry_id,$mode){
		$table = 'advertise_'.strtolower(trim($mode));
		$pk = strtolower(trim($mode)).'_id';
		$data = array(
			'one' 		=> true,
			'alias'		=> 'am',
			'field' 	=> array('a.advertise_id,a.publish'),
			'join'		=> array(
				array(
					'table' => 'advertise',
					'alias' => 'a',
					'on'    => 'a.advertise_id = am.advertise_id'
				)
			),
			'condition' => array(
				$pk => $entry_id
			)
		);
		$advertise = $this->db->fetch($table,$data);
		$publish_waiting = false;
		if($advertise){
			$waiting_targeting = $waiting_post = $waiting_photo = false;
			$targeting_progress = $this->getAdComponent($advertise['advertise_id'],'targeting');
			if(isset($targeting_progress['status']) && in_array($targeting_progress['status'], $this->config->get('ad_targeting_levels'))){
				$waiting_targeting = true;
			}

			$post_progress = $this->getAdComponent($advertise['advertise_id'],'post');
			if(isset($post_progress['status']) && in_array($post_progress['status'], $this->config->get('ad_post_levels'))){
				$waiting_post = true;
			}

			$photo_progress = $this->getAdComponent($advertise['advertise_id'],'photo');
			if(isset($photo_progress['status']) && in_array($photo_progress['status'], $this->config->get('ad_photo_levels'))){
				$waiting_photo = true;
			}

			if($waiting_targeting && $waiting_post && $waiting_photo)
				$publish_waiting = true;
		}
		
		$advertise_id = empty($advertise['advertise_id']) ? 0 : $advertise['advertise_id'];
		$publish = false;
		
		if($publish_waiting){
			
			$publish = $this->config->get('ad_publish_waiting');
		}else if($advertise['publish'] != $this->config->get('ad_publish_pending')){
			$publish = $this->config->get('ad_publish_designing');
			
		}
		if($advertise_id && $publish){
			$this->db->update('advertise',array('advertise_id'=>$advertise_id),array('publish'=>$publish,'date_modified'=>date('Y-m-d H:i:s')));
			$history = array(
				'advertise_id' 	=> $advertise_id,
				'from'			=> 'backend',
				'publish'		=> $publish,
				'in_charge'		=> $this->user->getId(),
				'notify'		=> 1,
				'note'			=> 'Auto Waiting',
				'date_added'	=> date('Y-m-d H:i:s')
			);
			return $this->db->insert('advertise_history',$history);
		}
	}
	function readMessage($advertise_id){
		$this->db->update('advertise_tracking',array('advertise_id'=>$advertise_id),array('read'=>1));
	}

	function getUnreadMessage($advertise_id=false){
		$filter = array(
			'one'	=> true,
			'field' => 'COUNT(tracking_id) total',
			'condition' => array(
				'from'	=> 'member',
				'read'  => 0
			)
		);
		if($advertise_id){
			$filter['condition']['advertise_id'] = $advertise_id;
		}

		$result = $this->db->fetch('advertise_tracking',$filter);
		return isset($result['total']) ? $result['total'] : 0;
	}

}